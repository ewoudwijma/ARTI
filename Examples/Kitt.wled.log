Parser PROGRAM PROGRAM
 PROGRAM PROGRAM -> [ID Kitt] 0
 ID Kitt -> [LCURL {] 0
 block 0
  LCURL { -> [ID pixelCounter] 1
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     ID pixelCounter -> [EQUAL =] 4
     success varleft
     EQUAL = -> [INTEGER_CONST 0] 4
     expr 4
      term 5
       factor 6
        call 7
        fail call
        varref 7
        fail varref
        INTEGER_CONST 0 -> [FUNCTION FUNCTION] 7
       symbol to shrink factor
       success factor
      remove multiple key
      remove multiple empty
      success term
     remove multiple key
     remove multiple empty
     success expr
    success assign
   symbol to shrink statement
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderFrame] 4
     ID renderFrame -> [LPAREN (] 4
      LPAREN ( -> [RPAREN )] 5
      formals 5
       formal 6
       fail formal
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [ID setPixelColor] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setPixelColor -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setPixelColor -> [LPAREN (] 8
         LPAREN ( -> [ID pixelCounter] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
              ID pixelCounter -> [COMMA ,] 13
             fail call
             varref 12
             ID pixelCounter -> [COMMA ,] 12
             success varref
            symbol to shrink factor
            success factor
           remove multiple key
           remove multiple empty
           success term
          remove multiple key
          remove multiple empty
          success expr
           COMMA , -> [ID pixelCounter] 10
           expr 10
            term 11
             factor 12
              call 13
               ID pixelCounter -> [RPAREN )] 14
              fail call
              varref 13
              ID pixelCounter -> [RPAREN )] 13
              success varref
             symbol to shrink factor
             success factor
            remove multiple key
            remove multiple empty
            success term
           remove multiple key
           remove multiple empty
           success expr
         remove multiple key
         success actuals
         RPAREN ) -> [ID setPixelColor] 8
        success call
       symbol to shrink statement
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setPixelColor -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setPixelColor -> [LPAREN (] 8
         LPAREN ( -> [ID pixelCounter] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
              ID pixelCounter -> [MINUS -] 13
             fail call
             varref 12
             ID pixelCounter -> [MINUS -] 12
             success varref
            symbol to shrink factor
            success factor
           remove multiple key
           remove multiple empty
           success term
             MINUS - -> [INTEGER_CONST 1] 12
            term 11
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 1 -> [COMMA ,] 13
             symbol to shrink factor
             success factor
            remove multiple key
            remove multiple empty
            success term
          remove multiple key
          success expr
           COMMA , -> [INTEGER_CONST 0] 10
           expr 10
            term 11
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 0 -> [RPAREN )] 13
             symbol to shrink factor
             success factor
            remove multiple key
            remove multiple empty
            success term
           remove multiple key
           remove multiple empty
           success expr
         remove multiple key
         success actuals
         RPAREN ) -> [ID pixelCounter] 8
        success call
       symbol to shrink statement
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID pixelCounter -> [EQUAL =] 8
         success varleft
         EQUAL = -> [ID pixelCounter] 8
         expr 8
          term 9
           factor 10
            call 11
             ID pixelCounter -> [PLUS +] 12
            fail call
            varref 11
            ID pixelCounter -> [PLUS +] 11
            success varref
           symbol to shrink factor
           success factor
          remove multiple key
          remove multiple empty
          success term
            PLUS + -> [INTEGER_CONST 1] 11
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 1 -> [RCURL }] 12
            symbol to shrink factor
            success factor
           remove multiple key
           remove multiple empty
           success term
         remove multiple key
         success expr
        success assign
       symbol to shrink statement
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [RCURL }] 5
     remove multiple key
     success block
    success function
   symbol to shrink statement
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
    fail function
    call 3
    fail call
    for 3
    fail for
    if 3
    fail if
    block 3
    fail block
   fail statement
  RCURL } 1
 remove multiple key
 success block
Symbol program Parsed until (11,1) 193 of 193
par mem 10515 of 14480 14480 1 0 16
prog size 193 factor 54
par mem 2835 of 14480 14480 1 0 16
Destruct Lexer
Destruct Parser

Analyzer
 Program Kitt 1 0
    Assign pixelCounter = {value (not of interest during analyze...)}
    Var (assign) Kitt.pixelCounter of notype
    Function Kitt.renderFrame
       Assign pixelCounter = {value (not of interest during analyze...)}
 0 Assign Kitt.pixelCounter notype 1
 1 Function Kitt.renderFrame  1

interpret Kitt 1 2
 program name ID
 Program Kitt Kitt
       INTEGER_CONST 0 (Push 1)
    Kitt.pixelCounter := 0 (pop 0)
    Save block of renderFrame
         Call renderFrame (1)
               VarRef Kitt.pixelCounter = 0 (push 1)
                 VarRef Kitt.pixelCounter = 0 (push 2)
            Call setPixelColor(0, 0)
               VarRef Kitt.pixelCounter = 0 (push 1)
                MINUS - (Push 2)
                 INTEGER_CONST 1 (Push 3)
             0 - 1 = -1 (push 1)
                 INTEGER_CONST 0 (Push 2)
            Call setPixelColor(-1, 0)
               VarRef Kitt.pixelCounter = 0 (push 1)
                PLUS + (Push 2)
                 INTEGER_CONST 1 (Push 3)
             0 + 1 = 1 (push 1)
            Kitt.pixelCounter := 1 (pop 0)
Destruct activation record renderFrame
         Call renderFrame (1)
               VarRef Kitt.pixelCounter = 1 (push 1)
                 VarRef Kitt.pixelCounter = 1 (push 2)
            Call setPixelColor(1, 1)
               VarRef Kitt.pixelCounter = 1 (push 1)
                MINUS - (Push 2)
                 INTEGER_CONST 1 (Push 3)
             1 - 1 = 0 (push 1)
                 INTEGER_CONST 0 (Push 2)
            Call setPixelColor(0, 0)
               VarRef Kitt.pixelCounter = 1 (push 1)
                PLUS + (Push 2)
                 INTEGER_CONST 1 (Push 3)
             1 + 1 = 2 (push 1)
            Kitt.pixelCounter := 2 (pop 0)
Destruct activation record renderFrame
Destruct callstack
Destruct valueStack
Destruct Interpreter
def mem 7277 of 12192 12192 24 0 6
