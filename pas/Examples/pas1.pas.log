Heap Setup < 0 (0ms) pas.json Examples/pas1.pas
Heap open definition file > 0
Heap definitionJsonDoc 16384 > 0 (0ms)
programFile size 382 bytes
Heap parseTreeJsonDoc 65536 > 0 (0ms)
 PROGRAM PROGRAM -> [ID Main] 0
 ID Main -> [SEMI ;] 0
 SEMI ; -> [VAR VAR] 0
    VAR VAR -> [ID y] 3
      ID y -> [COLON :] 5
      COLON : -> [INTEGER INTEGER] 5
       INTEGER INTEGER -> [SEMI ;] 6
      found type
     found variable
     SEMI ; -> [PROCEDURE PROCEDURE] 4
     PROCEDURE PROCEDURE -> [ID Alpha] 4
     ID Alpha -> [LPAREN (] 4
      LPAREN ( -> [ID a] 5
        ID a -> [COLON :] 7
        COLON : -> [INTEGER INTEGER] 7
         INTEGER INTEGER -> [SEMI ;] 8
        found type
       found formal
        SEMI ; -> [ID b] 7
         ID b -> [COLON :] 8
         COLON : -> [INTEGER INTEGER] 8
          INTEGER INTEGER -> [RPAREN )] 9
         found type
        found formal
      found formals
      RPAREN ) -> [SEMI ;] 5
     SEMI ; -> [VAR VAR] 4
        VAR VAR -> [ID x] 7
          ID x -> [COLON :] 9
          COLON : -> [INTEGER INTEGER] 9
           INTEGER INTEGER -> [SEMI ;] 10
          found type
         found variable
         SEMI ; -> [PROCEDURE PROCEDURE] 8
         PROCEDURE PROCEDURE -> [ID Beta] 8
         ID Beta -> [LPAREN (] 8
          LPAREN ( -> [ID a] 9
            ID a -> [COLON :] 11
            COLON : -> [INTEGER INTEGER] 11
             INTEGER INTEGER -> [SEMI ;] 12
            found type
           found formal
            SEMI ; -> [ID b] 11
             ID b -> [COLON :] 12
             COLON : -> [INTEGER INTEGER] 12
              INTEGER INTEGER -> [RPAREN )] 13
             found type
            found formal
          found formals
          RPAREN ) -> [SEMI ;] 9
         SEMI ; -> [VAR VAR] 8
            VAR VAR -> [ID x] 11
              ID x -> [COLON :] 13
              COLON : -> [INTEGER INTEGER] 13
               INTEGER INTEGER -> [SEMI ;] 14
              found type
             found variable
             SEMI ; -> [BEGIN BEGIN] 12
          found declarations
           BEGIN BEGIN -> [ID x] 10
              ID x -> [ASSIGN :=] 13
              ID x -> [ASSIGN :=] 13
              found varref
              ASSIGN := -> [ID a] 13
                 ID a -> [MUL *] 16
                 found varref
                found factor
                  MUL * -> [INTEGER_CONST 10] 17
                  INTEGER_CONST 10 -> [PLUS +] 17
                 found factor
               found term
                 PLUS + -> [ID b] 16
                  ID b -> [MUL *] 17
                  found varref
                 found factor
                   MUL * -> [INTEGER_CONST 2] 18
                   INTEGER_CONST 2 -> [SEMI ;] 18
                  found factor
                found term
              found expr
             found assign
            found statement
             SEMI ; -> [ID printf] 12
               ID printf -> [LPAREN (] 14
               LPAREN ( -> [ID x] 14
                   ID x -> [RPAREN )] 18
                   found varref
                  found factor
                 found term
                found expr
               found actuals
               RPAREN ) -> [SEMI ;] 14
              found call
             found statement
             SEMI ; -> [END END] 12
           found statement_list
           END END -> [SEMI ;] 10
          found compound_statement
         found block
         SEMI ; -> [BEGIN BEGIN] 8
        found function
      found declarations
       BEGIN BEGIN -> [ID x] 6
          ID x -> [ASSIGN :=] 9
          ID x -> [ASSIGN :=] 9
          found varref
          ASSIGN := -> [LPAREN (] 9
              LPAREN ( -> [ID a] 13
                 ID a -> [PLUS +] 16
                 found varref
                found factor
               found term
                 PLUS + -> [ID b] 16
                  ID b -> [RPAREN )] 17
                  found varref
                 found factor
                found term
              found expr
              RPAREN ) -> [MUL *] 13
            found factor
              MUL * -> [INTEGER_CONST 2] 13
              INTEGER_CONST 2 -> [SEMI ;] 13
             found factor
           found term
          found expr
         found assign
        found statement
         SEMI ; -> [ID printf] 8
           ID printf -> [LPAREN (] 10
           LPAREN ( -> [ID x] 10
               ID x -> [RPAREN )] 14
               found varref
              found factor
             found term
            found expr
           found actuals
           RPAREN ) -> [SEMI ;] 10
          found call
         found statement
         SEMI ; -> [ID Beta] 8
           ID Beta -> [LPAREN (] 10
           LPAREN ( -> [INTEGER_CONST 5] 10
               INTEGER_CONST 5 -> [COMMA ,] 14
              found factor
             found term
            found expr
             COMMA , -> [INTEGER_CONST 10] 12
                INTEGER_CONST 10 -> [RPAREN )] 15
               found factor
              found term
             found expr
           found actuals
           RPAREN ) -> [SEMI ;] 10
          found call
         found statement
         SEMI ; -> [END END] 8
       found statement_list
       END END -> [SEMI ;] 6
      found compound_statement
     found block
     SEMI ; -> [BEGIN BEGIN] 4
    found function
  found declarations
   BEGIN BEGIN -> [ID Alpha] 2
      ID Alpha -> [LPAREN (] 5
      LPAREN ( -> [INTEGER_CONST 3] 5
          INTEGER_CONST 3 -> [PLUS +] 9
         found factor
        found term
          PLUS + -> [INTEGER_CONST 5] 9
           INTEGER_CONST 5 -> [COMMA ,] 10
          found factor
         found term
       found expr
        COMMA , -> [INTEGER_CONST 7] 7
           INTEGER_CONST 7 -> [RPAREN )] 10
          found factor
         found term
        found expr
      found actuals
      RPAREN ) -> [SEMI ;] 5
     found call
    found statement
     SEMI ; -> [FOR FOR] 4
       FOR FOR -> [ID y] 6
        ID y -> [ASSIGN :=] 7
        found varref
        ASSIGN := -> [INTEGER_CONST 1] 7
           INTEGER_CONST 1 -> [TO TO] 10
          found factor
         found term
        found expr
       found assign
       TO TO -> [INTEGER_CONST 2] 6
          INTEGER_CONST 2 -> [DO DO] 9
         found factor
        found term
       found expr
       DO DO -> [BEGIN BEGIN] 6
        found declarations
         BEGIN BEGIN -> [ID Alpha] 8
            ID Alpha -> [LPAREN (] 11
            LPAREN ( -> [INTEGER_CONST 35] 11
                INTEGER_CONST 35 -> [COMMA ,] 15
               found factor
              found term
             found expr
              COMMA , -> [ID y] 13
                 ID y -> [RPAREN )] 16
                 found varref
                found factor
               found term
              found expr
            found actuals
            RPAREN ) -> [SEMI ;] 11
           found call
          found statement
           SEMI ; -> [END END] 10
         found statement_list
         END END -> [SEMI ;] 8
        found compound_statement
       found block
      found for
     found statement
     SEMI ; -> [END END] 4
   found statement_list
   END END -> [DOT .] 2
  found compound_statement
 found block
 DOT . 0
Symbol program Parsed until (31,6) 382 of 382
definitionJson usage 5511 of 16384 (34 %) (23 0 6)
parseTree usage      16152 of 65536 (25 %) (1 0 24)
garbageCollect       12408 of 65536 (19 %) (1 0 24)
Destruct Lexer
Heap parse > 0 (0ms)

Optimizer
                     symbol to shrink factor in term = {"varref":{"ID":"x"}} from {"factor":{"varref":{"ID":"x"}}}
             symbol to shrink statement_list in compound_statement = {"statement":{"assign":{"varref":{"ID":"x"},"expr":{"term":{"factor":{"varref":{"ID":"a"}},"*":[{"MUL":"*"},{"factor":{"INTEGER_CONST":"10"}}]},"*":[{"PLUS":"+"},{"term":{"factor":{"varref":{"ID":"b"}},"*":[{"MUL":"*"},{"factor":{"INTEGER_CONST":"2"}}]}}]}}},"*":[{},{"statement":{"call":{"ID":"printf","actuals":{"expr":{"term":{"varref":{"ID":"x"}}}}}}},{}]} from {"statement_list":{"statement":{"assign":{"varref":{"ID":"x"},"expr":{"term":{"factor":{"varref":{"ID":"a"}},"*":[{"MUL":"*"},{"factor":{"INTEGER_CONST":"10"}}]},"*":[{"PLUS":"+"},{"term":{"factor":{"varref":{"ID":"b"}},"*":[{"MUL":"*"},{"factor":{"INTEGER_CONST":"2"}}]}}]}}},"*":[{},{"statement":{"call":{"ID":"printf","actuals":{"expr":{"term":{"varref":{"ID":"x"}}}}}}},{}]}}
                symbol to shrink factor in term = {"varref":{"ID":"a"}} from {"factor":{"varref":{"ID":"a"}}}
                  symbol to shrink factor in term = {"varref":{"ID":"b"}} from {"factor":{"varref":{"ID":"b"}}}
                symbol to shrink factor in term = {"varref":{"ID":"x"}} from {"factor":{"varref":{"ID":"x"}}}
                symbol to shrink factor in term = {"INTEGER_CONST":"5"} from {"factor":{"INTEGER_CONST":"5"}}
                  symbol to shrink factor in term = {"INTEGER_CONST":"10"} from {"factor":{"INTEGER_CONST":"10"}}
        symbol to shrink statement_list in compound_statement = {"statement":{"assign":{"varref":{"ID":"x"},"expr":{"term":{"factor":{"expr":{"term":{"varref":{"ID":"a"}},"*":[{"PLUS":"+"},{"term":{"varref":{"ID":"b"}}}]}},"*":[{"MUL":"*"},{"factor":{"INTEGER_CONST":"2"}}]}}}},"*":[{},{"statement":{"call":{"ID":"printf","actuals":{"expr":{"term":{"varref":{"ID":"x"}}}}}}},{},{"statement":{"call":{"ID":"Beta","actuals":{"expr":{"term":{"INTEGER_CONST":"5"}},"*":[{},{"expr":{"term":{"INTEGER_CONST":"10"}}}]}}}},{}]} from {"statement_list":{"statement":{"assign":{"varref":{"ID":"x"},"expr":{"term":{"factor":{"expr":{"term":{"varref":{"ID":"a"}},"*":[{"PLUS":"+"},{"term":{"varref":{"ID":"b"}}}]}},"*":[{"MUL":"*"},{"factor":{"INTEGER_CONST":"2"}}]}}}},"*":[{},{"statement":{"call":{"ID":"printf","actuals":{"expr":{"term":{"varref":{"ID":"x"}}}}}}},{},{"statement":{"call":{"ID":"Beta","actuals":{"expr":{"term":{"INTEGER_CONST":"5"}},"*":[{},{"expr":{"term":{"INTEGER_CONST":"10"}}}]}}}},{}]}}
         symbol to shrink factor in term = {"INTEGER_CONST":"3"} from {"factor":{"INTEGER_CONST":"3"}}
           symbol to shrink factor in term = {"INTEGER_CONST":"5"} from {"factor":{"INTEGER_CONST":"5"}}
           symbol to shrink factor in term = {"INTEGER_CONST":"7"} from {"factor":{"INTEGER_CONST":"7"}}
           symbol to shrink factor in term = {"INTEGER_CONST":"1"} from {"factor":{"INTEGER_CONST":"1"}}
          symbol to shrink factor in term = {"INTEGER_CONST":"2"} from {"factor":{"INTEGER_CONST":"2"}}
                symbol to shrink factor in term = {"INTEGER_CONST":"35"} from {"factor":{"INTEGER_CONST":"35"}}
                  symbol to shrink factor in term = {"varref":{"ID":"y"}} from {"factor":{"varref":{"ID":"y"}}}
          symbol to shrink statement_list in compound_statement = {"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"35"}},"*":[{},{"expr":{"term":{"varref":{"ID":"y"}}}}]}}},"*":[{}]} from {"statement_list":{"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"35"}},"*":[{},{"expr":{"term":{"varref":{"ID":"y"}}}}]}}},"*":[{}]}}
         symbol to shrink compound_statement in block = {"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"35"}},"*":[{},{"expr":{"term":{"varref":{"ID":"y"}}}}]}}},"*":[{}]} from {"compound_statement":{"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"35"}},"*":[{},{"expr":{"term":{"varref":{"ID":"y"}}}}]}}},"*":[{}]}}
   symbol to shrink statement_list in compound_statement = {"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"3"},"*":[{"PLUS":"+"},{"term":{"INTEGER_CONST":"5"}}]},"*":[{},{"expr":{"term":{"INTEGER_CONST":"7"}}}]}}},"*":[{},{"statement":{"for":{"assign":{"varref":{"ID":"y"},"expr":{"term":{"INTEGER_CONST":"1"}}},"expr":{"term":{"INTEGER_CONST":"2"}},"block":{"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"35"}},"*":[{},{"expr":{"term":{"varref":{"ID":"y"}}}}]}}},"*":[{}]}}}},{}]} from {"statement_list":{"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"3"},"*":[{"PLUS":"+"},{"term":{"INTEGER_CONST":"5"}}]},"*":[{},{"expr":{"term":{"INTEGER_CONST":"7"}}}]}}},"*":[{},{"statement":{"for":{"assign":{"varref":{"ID":"y"},"expr":{"term":{"INTEGER_CONST":"1"}}},"expr":{"term":{"INTEGER_CONST":"2"}},"block":{"statement":{"call":{"ID":"Alpha","actuals":{"expr":{"term":{"INTEGER_CONST":"35"}},"*":[{},{"expr":{"term":{"varref":{"ID":"y"}}}}]}}},"*":[{}]}}}},{}]}}
Heap optimize > 0 (0ms)

Analyzer
 Program Main 1 0
     variable Main.y of {"INTEGER":"INTEGER"}
     Function Main.Alpha
      formal Alpha.a of {"INTEGER":"INTEGER"}
        formal Alpha.b of {"INTEGER":"INTEGER"}
         variable Alpha.x of {"INTEGER":"INTEGER"}
         Function Alpha.Beta
          formal Beta.a of {"INTEGER":"INTEGER"}
            formal Beta.b of {"INTEGER":"INTEGER"}
             variable Beta.x of {"INTEGER":"INTEGER"}
            assign x = (11)
                VarRef found Beta.a (15)
                  VarRef found Beta.b (17)
              Ext Function found printf (13)
                 VarRef found Beta.x (16)
         0 formal Beta.a of 9 (3)
         1 formal Beta.b of 9 (3)
         2 variable Beta.x of 9 (3)
        assign x = (7)
              VarRef found Alpha.a (13)
                VarRef found Alpha.b (15)
          Ext Function found printf (9)
             VarRef found Alpha.x (12)
     0 formal Alpha.a of 9 (2)
     1 formal Alpha.b of 9 (2)
     2 variable Alpha.x of 9 (2)
     3 function Alpha.Beta of 9 (2)
       assign y = (6)
              VarRef found Main.y (13)
 0 variable Main.y of 9 (1)
 1 function Main.Alpha of 9 (1)
Heap analyze > 0 (0ms)

interpret Main 1 2
 program Main
     Save block of Alpha
    call Alpha
       INTEGER_CONST 3 (Push 1)
        PLUS + (Push 2)
         INTEGER_CONST 5 (Push 3)
     3.000000 + 5.000000 = 8.000000 (push 4)
         INTEGER_CONST 7 (Push 2)
    Actual Alpha.a = 8.000000 (pop 2)
    Actual Alpha.b = 7.000000 (pop 2)
        Save block of Beta
             varref Alpha.a = 8.000000 (push 1) 2-0
              PLUS + (Push 2)
               varref Alpha.b = 7.000000 (push 3) 2-1
           8.000000 + 7.000000 = 15.000000 (push 4)
            MUL * (Push 2)
             INTEGER_CONST 2 (Push 3)
         15.000000 * 2.000000 = 30.000000 (push 4)
       Alpha.x := 30.000000 (pop 0) 2-2
            varref Alpha.x = 30.000000 (push 1) 2-2
printf(30.000000)
         Call printf(30.000000)
         call Beta
            INTEGER_CONST 5 (Push 1)
              INTEGER_CONST 10 (Push 2)
         Actual Beta.a = 5.000000 (pop 2)
         Actual Beta.b = 10.000000 (pop 2)
                varref Beta.a = 5.000000 (push 1) 3-0
                 MUL * (Push 2)
                  INTEGER_CONST 10 (Push 3)
              5.000000 * 10.000000 = 50.000000 (push 4)
                PLUS + (Push 2)
                  varref Beta.b = 10.000000 (push 3) 3-1
                   MUL * (Push 4)
                    INTEGER_CONST 2 (Push 5)
                10.000000 * 2.000000 = 20.000000 (push 6)
             50.000000 + 20.000000 = 70.000000 (push 4)
            Beta.x := 70.000000 (pop 0) 3-2
                 varref Beta.x = 70.000000 (push 1) 3-2
printf(70.000000)
              Call printf(70.000000)
Destruct activation record Beta
Destruct activation record Alpha
      For (0)
          INTEGER_CONST 1 (Push 1)
       Main.y := 1.000000 (pop 0) 1-0
      iteration
      check to condition
         INTEGER_CONST 2 (Push 1)
      conditionResult (pop 0)
      Main.(0) 1.000000 <= 2.000000 = 1.000000
      1 => run block
        call Alpha
           INTEGER_CONST 35 (Push 1)
             varref Main.y = 1.000000 (push 2) 1-0
        Actual Alpha.a = 35.000000 (pop 2)
        Actual Alpha.b = 1.000000 (pop 2)
            Save block of Beta
                 varref Alpha.a = 35.000000 (push 1) 2-0
                  PLUS + (Push 2)
                   varref Alpha.b = 1.000000 (push 3) 2-1
               35.000000 + 1.000000 = 36.000000 (push 4)
                MUL * (Push 2)
                 INTEGER_CONST 2 (Push 3)
             36.000000 * 2.000000 = 72.000000 (push 4)
           Alpha.x := 72.000000 (pop 0) 2-2
                varref Alpha.x = 72.000000 (push 1) 2-2
printf(72.000000)
             Call printf(72.000000)
             call Beta
                INTEGER_CONST 5 (Push 1)
                  INTEGER_CONST 10 (Push 2)
             Actual Beta.a = 5.000000 (pop 2)
             Actual Beta.b = 10.000000 (pop 2)
                    varref Beta.a = 5.000000 (push 1) 3-0
                     MUL * (Push 2)
                      INTEGER_CONST 10 (Push 3)
                  5.000000 * 10.000000 = 50.000000 (push 4)
                    PLUS + (Push 2)
                      varref Beta.b = 10.000000 (push 3) 3-1
                       MUL * (Push 4)
                        INTEGER_CONST 2 (Push 5)
                    10.000000 * 2.000000 = 20.000000 (push 6)
                 50.000000 + 20.000000 = 70.000000 (push 4)
                Beta.x := 70.000000 (pop 0) 3-2
                     varref Beta.x = 70.000000 (push 1) 3-2
printf(70.000000)
                  Call printf(70.000000)
Destruct activation record Beta
Destruct activation record Alpha
      iteration
      check to condition
         INTEGER_CONST 2 (Push 1)
      conditionResult (pop 0)
      Main.(0) 2.000000 <= 2.000000 = 1.000000
      1 => run block
        call Alpha
           INTEGER_CONST 35 (Push 1)
             varref Main.y = 2.000000 (push 2) 1-0
        Actual Alpha.a = 35.000000 (pop 2)
        Actual Alpha.b = 2.000000 (pop 2)
            Save block of Beta
                 varref Alpha.a = 35.000000 (push 1) 2-0
                  PLUS + (Push 2)
                   varref Alpha.b = 2.000000 (push 3) 2-1
               35.000000 + 2.000000 = 37.000000 (push 4)
                MUL * (Push 2)
                 INTEGER_CONST 2 (Push 3)
             37.000000 * 2.000000 = 74.000000 (push 4)
           Alpha.x := 74.000000 (pop 0) 2-2
                varref Alpha.x = 74.000000 (push 1) 2-2
printf(74.000000)
             Call printf(74.000000)
             call Beta
                INTEGER_CONST 5 (Push 1)
                  INTEGER_CONST 10 (Push 2)
             Actual Beta.a = 5.000000 (pop 2)
             Actual Beta.b = 10.000000 (pop 2)
                    varref Beta.a = 5.000000 (push 1) 3-0
                     MUL * (Push 2)
                      INTEGER_CONST 10 (Push 3)
                  5.000000 * 10.000000 = 50.000000 (push 4)
                    PLUS + (Push 2)
                      varref Beta.b = 10.000000 (push 3) 3-1
                       MUL * (Push 4)
                        INTEGER_CONST 2 (Push 5)
                    10.000000 * 2.000000 = 20.000000 (push 6)
                 50.000000 + 20.000000 = 70.000000 (push 4)
                Beta.x := 70.000000 (pop 0) 3-2
                     varref Beta.x = 70.000000 (push 1) 3-2
printf(70.000000)
                  Call printf(70.000000)
Destruct activation record Beta
Destruct activation record Alpha
      iteration
      check to condition
         INTEGER_CONST 2 (Push 1)
      conditionResult (pop 0)
      Main.(0) 3.000000 <= 2.000000 = 0.000000
      0 => end of For
Heap Interpret main > 0 (0ms)
Heap close Arti < 0
Destruct callstack
Destruct valueStack
Heap Destruct Symbol a (0)
Heap Destruct Symbol b (0)
Heap Destruct Symbol x (0)
Heap Destruct ScopedSymbolTable Beta (0)
Heap Destruct Symbol a (0)
Heap Destruct Symbol b (0)
Heap Destruct Symbol x (0)
Heap Destruct Symbol Beta (0)
Heap Destruct ScopedSymbolTable Alpha (0)
Heap Destruct Symbol y (0)
Heap Destruct Symbol Alpha (0)
Heap Destruct ScopedSymbolTable Main (0)
definitionJson usage  5511 of 16384 (34 %) (23 0 6)
parseTree usage       19832 of 65536 (30 %) (1 0 23)
