Parser PROGRAM PROGRAM
  PROGRAM PROGRAM -> [ID Main]
  ID Main -> [CURLYOPEN {]
  compound
    CURLYOPEN { -> [ID pixelCounter]
    block*
        variable
        fail variable
        function
        fail function
        statement
           compound
           fail compound
           call
             ID pixelCounter -> [EQUAL =]
           fail call
           assign
             varleft
              ID pixelCounter -> [EQUAL =]
             success varleft
             EQUAL = -> [INTEGER_CONST 0]
             expr*
               term*
                 factor
                    call
                    fail call
                    varref
                    fail varref
                    INTEGER_CONST 0 -> [FUNCTION FUNCTION]
                 success factor
               success term*
             success expr*
           success assign
        success statement
        variable
        fail variable
        function
          FUNCTION FUNCTION -> [ID renderFrame]
          ID renderFrame -> [LPAREN (]
            LPAREN ( -> [RPAREN )]
            formals*
               formal
               fail formal
            success formals*
            RPAREN ) -> [CURLYOPEN {]
          compound
            CURLYOPEN { -> [ID setPixelColor]
            block*
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                     ID setPixelColor -> [LPAREN (]
                     LPAREN ( -> [ID pixelCounter]
                     actuals*
                        expr*
                          term*
                            factor
                               call
                                 ID pixelCounter -> [COMMA ,]
                               fail call
                               varref
                                ID pixelCounter -> [COMMA ,]
                               success varref
                            success factor
                          success term*
                        success expr*
                          COMMA , -> [ID pixelCounter]
                          expr*
                            term*
                              factor
                                 call
                                   ID pixelCounter -> [RPAREN )]
                                 fail call
                                 varref
                                  ID pixelCounter -> [RPAREN )]
                                 success varref
                              success factor
                            success term*
                          success expr*
                     success actuals*
                     RPAREN ) -> [ID pixelCounter]
                   success call
                success statement
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                     ID pixelCounter -> [EQUAL =]
                   fail call
                   assign
                     varleft
                      ID pixelCounter -> [EQUAL =]
                     success varleft
                     EQUAL = -> [ID pixelCounter]
                     expr*
                       term*
                         factor
                            call
                              ID pixelCounter -> [PLUS +]
                            fail call
                            varref
                             ID pixelCounter -> [PLUS +]
                            success varref
                         success factor
                       success term*
                           PLUS + -> [INTEGER_CONST 1]
                         term*
                           factor
                              call
                              fail call
                              varref
                              fail varref
                              INTEGER_CONST 1 -> [CURLYCLOSE }]
                           success factor
                         success term*
                     success expr*
                   success assign
                success statement
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                   fail call
                   assign
                     varleft
                     fail varleft
                   fail assign
                   for
                   fail for
                   if
                   fail if
                fail statement
            success block*
            CURLYCLOSE } -> [CURLYCLOSE }]
          success compound
        success function
        variable
        fail variable
        function
        fail function
        statement
           compound
           fail compound
           call
           fail call
           assign
             varleft
             fail varleft
           fail assign
           for
           fail for
           if
           fail if
        fail statement
    success block*
    CURLYCLOSE }
  success compound
Symbol program Parsed until (10,1) 157 of 157
Destruct Lexer
Destruct Parser

Analyzer
 Program Main 1 0
     Assign pixelCounter = {value (not of interest during analyze...)}
     Var (assign) Main.pixelCounter of notype
    Function Main.renderFrame
        Assign pixelCounter = {value (not of interest during analyze...)}
 0 Assign Main.pixelCounter notype 1
 1 Function Main.renderFrame  1

interpret Main 1 2
scope Assign Main.pixelCounter notype 1
scope Function Main.renderFrame  1
 program name ID
 Program Main Main
         Push INTEGER_CONST 0
     Main.pixelCounter := 0 (pop)
    Save block of renderFrame
Destruct valueStack
Destruct Interpreter
         Call renderFrame (1)
                  VarRef Main.pixelCounter = 0 (push)
                  VarRef Main.pixelCounter = 0 (push)
                 VarRef Main.pixelCounter = 0 (push)
                 Push INTEGER_CONST 1
              0 + 1 = 1
             Main.pixelCounter := 1 (pop)
Destruct activation record renderFrame
Destruct valueStack
Destruct Interpreter
         Call renderFrame (1)
                  VarRef Main.pixelCounter = 1 (push)
                  VarRef Main.pixelCounter = 1 (push)
                 VarRef Main.pixelCounter = 1 (push)
                 Push INTEGER_CONST 1
              1 + 1 = 2
             Main.pixelCounter := 2 (pop)
Destruct activation record renderFrame
Destruct valueStack
Destruct Interpreter
Destruct callstack
def mem 7013 of 12192 12192 24
def mem 7013 of 12192 12192 24
par mem 4852 of 7856 7856 1
prog size 157 factor 30
par mem 2548 of 7856 7856 1
