Parser PROGRAM PROGRAM
  PROGRAM PROGRAM -> [ID Main]
  ID Main -> [CURLYOPEN {]
  compound
    CURLYOPEN { -> [ID pixelCount]
    block*
        variable
        fail variable
        function
        fail function
        statement
           compound
           fail compound
           call
             ID pixelCount -> [EQUAL =]
           fail call
           assign
             varleft
              ID pixelCount -> [EQUAL =]
             success varleft
             EQUAL = -> [INTEGER_CONST 30]
             expr*
               term*
                 factor
                    call
                    fail call
                    varref
                    fail varref
                    INTEGER_CONST 30 -> [ID pixels]
                 success factor
               success term*
             success expr*
           success assign
        success statement
        variable
        fail variable
        function
        fail function
        statement
           compound
           fail compound
           call
             ID pixels -> [EQUAL =]
           fail call
           assign
             varleft
              ID pixels -> [EQUAL =]
             success varleft
             EQUAL = -> [ID array]
             expr*
               term*
                 factor
                    call
                      ID array -> [LPAREN (]
                      LPAREN ( -> [ID pixelCount]
                      actuals*
                         expr*
                           term*
                             factor
                                call
                                  ID pixelCount -> [COMMA ,]
                                fail call
                                varref
                                 ID pixelCount -> [COMMA ,]
                                success varref
                             success factor
                           success term*
                         success expr*
                           COMMA , -> [ID pixelCount]
                           expr*
                             term*
                               factor
                                  call
                                    ID pixelCount -> [RPAREN )]
                                  fail call
                                  varref
                                   ID pixelCount -> [RPAREN )]
                                  success varref
                               success factor
                             success term*
                           success expr*
                      success actuals*
                      RPAREN ) -> [FUNCTION FUNCTION]
                    success call
                 success factor
               success term*
             success expr*
           success assign
        success statement
        variable
        fail variable
        function
          FUNCTION FUNCTION -> [ID init]
          ID init -> [LPAREN (]
            LPAREN ( -> [RPAREN )]
            formals*
               formal
               fail formal
            success formals*
            RPAREN ) -> [CURLYOPEN {]
          compound
            CURLYOPEN { -> [CURLYCLOSE }]
            block*
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                   fail call
                   assign
                     varleft
                     fail varleft
                   fail assign
                   for_loop
                   fail for_loop
                fail statement
            success block*
            CURLYCLOSE } -> [FUNCTION FUNCTION]
          success compound
        success function
        variable
        fail variable
        function
          FUNCTION FUNCTION -> [ID before]
          ID before -> [LPAREN (]
            LPAREN ( -> [RPAREN )]
            formals*
               formal
               fail formal
            success formals*
            RPAREN ) -> [CURLYOPEN {]
          compound
            CURLYOPEN { -> [ID pixels]
            block*
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                     ID pixels -> [LBRACKET []
                   fail call
                   assign
                     varleft
                      ID pixels -> [LBRACKET []
                     success varleft
                       LBRACKET [ -> [INTEGER_CONST 3]
                       indices*
                         expr*
                           term*
                             factor
                                call
                                fail call
                                varref
                                fail varref
                                INTEGER_CONST 3 -> [COMMA ,]
                             success factor
                           success term*
                         success expr*
                           COMMA , -> [INTEGER_CONST 7]
                           expr*
                             term*
                               factor
                                  call
                                  fail call
                                  varref
                                  fail varref
                                  INTEGER_CONST 7 -> [RBRACKET ]]
                               success factor
                             success term*
                           success expr*
                       success indices*
                       RBRACKET ] -> [EQUAL =]
                     EQUAL = -> [INTEGER_CONST 10]
                     expr*
                       term*
                         factor
                            call
                            fail call
                            varref
                            fail varref
                            INTEGER_CONST 10 -> [CURLYCLOSE }]
                         success factor
                       success term*
                     success expr*
                   success assign
                success statement
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                   fail call
                   assign
                     varleft
                     fail varleft
                   fail assign
                   for_loop
                   fail for_loop
                fail statement
            success block*
            CURLYCLOSE } -> [FUNCTION FUNCTION]
          success compound
        success function
        variable
        fail variable
        function
          FUNCTION FUNCTION -> [ID render]
          ID render -> [LPAREN (]
            LPAREN ( -> [ID index]
            formals*
               formal
                ID index -> [COMMA ,]
               success formal
                 COMMA , -> [ID index2]
                 formal
                  ID index2 -> [RPAREN )]
                 success formal
            success formals*
            RPAREN ) -> [CURLYOPEN {]
          compound
            CURLYOPEN { -> [CURLYCLOSE }]
            block*
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                   fail call
                   assign
                     varleft
                     fail varleft
                   fail assign
                   for_loop
                   fail for_loop
                fail statement
            success block*
            CURLYCLOSE } -> [FUNCTION FUNCTION]
          success compound
        success function
        variable
        fail variable
        function
          FUNCTION FUNCTION -> [ID array]
          ID array -> [LPAREN (]
            LPAREN ( -> [ID index]
            formals*
               formal
                ID index -> [COMMA ,]
               success formal
                 COMMA , -> [ID index2]
                 formal
                  ID index2 -> [RPAREN )]
                 success formal
            success formals*
            RPAREN ) -> [CURLYOPEN {]
          compound
            CURLYOPEN { -> [CURLYCLOSE }]
            block*
                variable
                fail variable
                function
                fail function
                statement
                   compound
                   fail compound
                   call
                   fail call
                   assign
                     varleft
                     fail varleft
                   fail assign
                   for_loop
                   fail for_loop
                fail statement
            success block*
            CURLYCLOSE } -> [CURLYOPEN {]
          success compound
        success function
        variable
        fail variable
        function
        fail function
        statement
           compound
             CURLYOPEN { -> [ID init]
             block*
                 variable
                 fail variable
                 function
                 fail function
                 statement
                    compound
                    fail compound
                    call
                      ID init -> [LPAREN (]
                      LPAREN ( -> [RPAREN )]
                      actuals*
                         expr*
                           term*
                             factor
                                call
                                fail call
                                varref
                                fail varref
                             fail factor
                           fail term*
                         fail expr*
                      success actuals*
                      RPAREN ) -> [ID before]
                    success call
                 success statement
                 variable
                 fail variable
                 function
                 fail function
                 statement
                    compound
                    fail compound
                    call
                      ID before -> [LPAREN (]
                      LPAREN ( -> [RPAREN )]
                      actuals*
                         expr*
                           term*
                             factor
                                call
                                fail call
                                varref
                                fail varref
                             fail factor
                           fail term*
                         fail expr*
                      success actuals*
                      RPAREN ) -> [CURLYCLOSE }]
                    success call
                 success statement
                 variable
                 fail variable
                 function
                 fail function
                 statement
                    compound
                    fail compound
                    call
                    fail call
                    assign
                      varleft
                      fail varleft
                    fail assign
                    for_loop
                    fail for_loop
                 fail statement
             success block*
             CURLYCLOSE } -> [CURLYCLOSE }]
           success compound
        success statement
        variable
        fail variable
        function
        fail function
        statement
           compound
           fail compound
           call
           fail call
           assign
             varleft
             fail varleft
           fail assign
           for_loop
           fail for_loop
        fail statement
    success block*
    CURLYCLOSE }
  success compound
Symbol program Parsed until (25,1) 286 of 286

Analyzer
 Program Main 1 0
     Assign pixelCount = {value (not of interest during analyze...) [{"term*":[{"factor":{"INTEGER_CONST":"30"}}]}]}
     Var (assign) Main.pixelCount of notype
     Assign pixels = {value (not of interest during analyze...) [{"term*":[{"factor":{"call":{"ID":"array","LPAREN":"(","actuals*":[{"expr*":[{"term*":[{"factor":{"varref":{"ID":"pixelCount"}}}]}]},{"COMMA":","},{"expr*":[{"term*":[{"factor":{"varref":{"ID":"pixelCount"}}}]}]}],"RPAREN":")"}}}]}]}
     Var (assign) Main.pixels of notype
    Function Main.init
    Function Main.before
        Assign pixels = {value (not of interest during analyze...) [{"term*":[{"factor":{"INTEGER_CONST":"10"}}]}]}
    Function Main.render
      Var render.index of notype
      Var render.index2 of notype
    0 Formal render.index notype 2
    1 Formal render.index2 notype 2
    Function Main.array
      Var array.index of notype
      Var array.index2 of notype
    0 Formal array.index notype 2
    1 Formal array.index2 notype 2
 0 Assign Main.pixelCount notype 1
 1 Assign Main.pixels notype 1
 2 Function Main.init  1
 3 Function Main.before  1
 4 Function Main.render  1
 5 Function Main.array  1

interpret Main 1 6 4
scope Assign Main.pixelCount notype 1
scope Assign Main.pixels notype 1
scope Function Main.init  1
scope Function Main.before  1
scope Function Main.render  1
scope Function Main.array  1
 program name ID
 Program Main Main
         Push INTEGER_CONST 30 30
     pixelCount := 30 (pop)
         Call array array array
              varref pixelCount = 30 (push)
              varref pixelCount = 30 (push)
         Actual index2 = 30 (pop)
         Actual index = 30 (pop)
     pixels := CallResult tbd of array (pop)
    Save block of init
    Save block of before
    Save block of render
    Save block of array
         Call init init init
         Call before before before
                 Push INTEGER_CONST 10 10
                   Push INTEGER_CONST 3 3
                   Push INTEGER_CONST 7 7
             pixels[3,7,] := 10 (pop)
def mem 6318 of 8192 8192 21
par mem 11002 of 14304 14304 1
prog size 286 factor 38
