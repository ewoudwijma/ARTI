Parser PROGRAM PROGRAM
  PROGRAM PROGRAM -> [ID Main]
  ID Main -> [CURLYOPEN {]
  CURLYOPEN { -> [ID pixels]
  block
    declarations*
       variable_declaration
         ID pixels -> [COLON :]
         COLON : -> [ARRAY ARRAY]
         ARRAY ARRAY -> [LPAREN (]
         LPAREN ( -> [ID pixelCount]
         variable
          ID pixelCount -> [RPAREN )]
         success variable
         RPAREN ) -> [FUNCTION FUNCTION]
       success variable_declaration
       variable_declaration
       fail variable_declaration
       procedure_declaration
         FUNCTION FUNCTION -> [ID init]
         ID init -> [LPAREN (]
           LPAREN ( -> [RPAREN )]
           formal_parameter_list*
              formal_parameters
              fail formal_parameters
           success formal_parameter_list*
           RPAREN ) -> [CURLYOPEN {]
         block
           declarations*
              variable_declaration
              fail variable_declaration
              procedure_declaration
              fail procedure_declaration
           success declarations*
           compound_statement
             CURLYOPEN { -> [CURLYCLOSE }]
             statement_list*
                statement
                   compound_statement
                   fail compound_statement
                   proccall_statement
                   fail proccall_statement
                   assignment_statement
                     variableassignment
                        arrayvariable
                          variable
                          fail variable
                        fail arrayvariable
                        variable
                        fail variable
                     fail variableassignment
                   fail assignment_statement
                   for_loop
                   fail for_loop
                fail statement
             success statement_list*
             CURLYCLOSE } -> [FUNCTION FUNCTION]
           success compound_statement
         success block
       success procedure_declaration
       procedure_declaration
         FUNCTION FUNCTION -> [ID before]
         ID before -> [LPAREN (]
           LPAREN ( -> [RPAREN )]
           formal_parameter_list*
              formal_parameters
              fail formal_parameters
           success formal_parameter_list*
           RPAREN ) -> [CURLYOPEN {]
         block
           declarations*
              variable_declaration
              fail variable_declaration
              procedure_declaration
              fail procedure_declaration
           success declarations*
           compound_statement
             CURLYOPEN { -> [ID pixels]
             statement_list*
                statement
                   compound_statement
                   fail compound_statement
                   proccall_statement
                     ID pixels -> [LBRACKET []
                   fail proccall_statement
                   assignment_statement
                     variableassignment
                        arrayvariable
                          variable
                           ID pixels -> [LBRACKET []
                          success variable
                          LBRACKET [ -> [INTEGER_CONST 3]
                          expr*
                            term*
                              factor
                                 variable
                                 fail variable
                                 INTEGER_CONST 3 -> [RBRACKET ]]
                              success factor
                            success term*
                          success expr*
                          RBRACKET ] -> [EQUALSIGN =]
                        success arrayvariable
                     success variableassignment
                     EQUALSIGN = -> [INTEGER_CONST 10]
                     expr*
                       term*
                         factor
                            variable
                            fail variable
                            INTEGER_CONST 10 -> [SEMI ;]
                         success factor
                       success term*
                     success expr*
                   success assignment_statement
                success statement
                  SEMI ; -> [CURLYCLOSE }]
                  statement
                     compound_statement
                     fail compound_statement
                     proccall_statement
                     fail proccall_statement
                     assignment_statement
                       variableassignment
                          arrayvariable
                            variable
                            fail variable
                          fail arrayvariable
                          variable
                          fail variable
                       fail variableassignment
                     fail assignment_statement
                     for_loop
                     fail for_loop
                  fail statement
             success statement_list*
             CURLYCLOSE } -> [FUNCTION FUNCTION]
           success compound_statement
         success block
       success procedure_declaration
       procedure_declaration
         FUNCTION FUNCTION -> [ID render]
         ID render -> [LPAREN (]
           LPAREN ( -> [ID index]
           formal_parameter_list*
              formal_parameters
                ID index -> [RPAREN )]
              success formal_parameters
           success formal_parameter_list*
           RPAREN ) -> [CURLYOPEN {]
         block
           declarations*
              variable_declaration
              fail variable_declaration
              procedure_declaration
              fail procedure_declaration
           success declarations*
           compound_statement
             CURLYOPEN { -> [CURLYCLOSE }]
             statement_list*
                statement
                   compound_statement
                   fail compound_statement
                   proccall_statement
                   fail proccall_statement
                   assignment_statement
                     variableassignment
                        arrayvariable
                          variable
                          fail variable
                        fail arrayvariable
                        variable
                        fail variable
                     fail variableassignment
                   fail assignment_statement
                   for_loop
                   fail for_loop
                fail statement
             success statement_list*
             CURLYCLOSE } -> [CURLYOPEN {]
           success compound_statement
         success block
       success procedure_declaration
       procedure_declaration
       fail procedure_declaration
    success declarations*
    compound_statement
      CURLYOPEN { -> [ID init]
      statement_list*
         statement
            compound_statement
            fail compound_statement
            proccall_statement
              ID init -> [LPAREN (]
              LPAREN ( -> [RPAREN )]
              actual_parameter_list*
                 expr*
                   term*
                     factor
                        variable
                        fail variable
                     fail factor
                   fail term*
                 fail expr*
              success actual_parameter_list*
              RPAREN ) -> [SEMI ;]
            success proccall_statement
         success statement
           SEMI ; -> [ID before]
           statement
              compound_statement
              fail compound_statement
              proccall_statement
                ID before -> [LPAREN (]
                LPAREN ( -> [RPAREN )]
                actual_parameter_list*
                   expr*
                     term*
                       factor
                          variable
                          fail variable
                       fail factor
                     fail term*
                   fail expr*
                success actual_parameter_list*
                RPAREN ) -> [SEMI ;]
              success proccall_statement
           success statement
           SEMI ; -> [CURLYCLOSE }]
           statement
              compound_statement
              fail compound_statement
              proccall_statement
              fail proccall_statement
              assignment_statement
                variableassignment
                   arrayvariable
                     variable
                     fail variable
                   fail arrayvariable
                   variable
                   fail variable
                fail variableassignment
              fail assignment_statement
              for_loop
              fail for_loop
           fail statement
      success statement_list*
      CURLYCLOSE } -> [CURLYCLOSE }]
    success compound_statement
  success block
  CURLYCLOSE }
Symbol program Parsed until (20,1) 199 of 199

Analyzer
 Program Main 1 0
    var Main.pixels of notype
    procedure Main init
    procedure Main before
         Assign (null) =
    procedure Main render
      var render.index of notype
    0 formal_parameters index notype 2
 0 variable_declaration pixels notype 1
 1 procedure_declaration init  1
 2 procedure_declaration before  1
 3 procedure_declaration render  1

interpret Main 1 4 3
scope variable_declaration pixels notype 1
scope procedure_declaration init  1
scope procedure_declaration before  1
scope procedure_declaration render  1
 program name ID
 Program Main Main
     variable pixelCount = (null)
Calc stack full 0 of 30 or value is null
    Save block of init
    Save block of before
    Save block of render
      ProcedureCall init init init
      ProcedureCall before before before
           (null) := (null)
def mem 7252 of 8192 6815104 25
par mem 6905 of 7960 6815104 1
prog size 199 factor 34
