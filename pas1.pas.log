Parser PROGRAM PROGRAM
  PROGRAM PROGRAM -> [ID Main]
  variable
   ID Main -> [SEMI ;]
  success variable
  SEMI ; -> [VAR VAR]
  block
    declarations*
        VAR VAR -> [ID y]
          variable_declaration
            ID y -> [COLON :]
            COLON : -> [INTEGER INTEGER]
            type_spec
               INTEGER INTEGER -> [SEMI ;]
            success type_spec
          success variable_declaration
          SEMI ; -> [PROCEDURE PROCEDURE]
          variable_declaration
          fail variable_declaration
       procedure_declaration
         PROCEDURE PROCEDURE -> [ID Alpha]
         ID Alpha -> [LPAREN (]
           LPAREN ( -> [ID a]
           formal_parameter_list*
             formal_parameters
               ID a -> [COLON :]
               COLON : -> [INTEGER INTEGER]
               type_spec
                  INTEGER INTEGER -> [SEMI ;]
               success type_spec
             success formal_parameters
               SEMI ; -> [ID b]
               formal_parameters
                 ID b -> [COLON :]
                 COLON : -> [INTEGER INTEGER]
                 type_spec
                    INTEGER INTEGER -> [RPAREN )]
                 success type_spec
               success formal_parameters
           success formal_parameter_list*
           RPAREN ) -> [SEMI ;]
         SEMI ; -> [VAR VAR]
         block
           declarations*
               VAR VAR -> [ID x]
                 variable_declaration
                   ID x -> [COLON :]
                   COLON : -> [INTEGER INTEGER]
                   type_spec
                      INTEGER INTEGER -> [SEMI ;]
                   success type_spec
                 success variable_declaration
                 SEMI ; -> [PROCEDURE PROCEDURE]
                 variable_declaration
                 fail variable_declaration
              procedure_declaration
                PROCEDURE PROCEDURE -> [ID Beta]
                ID Beta -> [LPAREN (]
                  LPAREN ( -> [ID a]
                  formal_parameter_list*
                    formal_parameters
                      ID a -> [COLON :]
                      COLON : -> [INTEGER INTEGER]
                      type_spec
                         INTEGER INTEGER -> [SEMI ;]
                      success type_spec
                    success formal_parameters
                      SEMI ; -> [ID b]
                      formal_parameters
                        ID b -> [COLON :]
                        COLON : -> [INTEGER INTEGER]
                        type_spec
                           INTEGER INTEGER -> [RPAREN )]
                        success type_spec
                      success formal_parameters
                  success formal_parameter_list*
                  RPAREN ) -> [SEMI ;]
                SEMI ; -> [VAR VAR]
                block
                  declarations*
                      VAR VAR -> [ID x]
                        variable_declaration
                          ID x -> [COLON :]
                          COLON : -> [INTEGER INTEGER]
                          type_spec
                             INTEGER INTEGER -> [SEMI ;]
                          success type_spec
                        success variable_declaration
                        SEMI ; -> [BEGIN BEGIN]
                        variable_declaration
                        fail variable_declaration
                     procedure_declaration
                     fail procedure_declaration
                  success declarations*
                  compound_statement
                    BEGIN BEGIN -> [ID x]
                    statement_list*
                      statement
                         compound_statement
                         fail compound_statement
                         proccall_statement
                           ID x -> [ASSIGN :=]
                         fail proccall_statement
                         assignment_statement
                           variable
                            ID x -> [ASSIGN :=]
                           success variable
                           ASSIGN := -> [ID a]
                           expr*
                             term*
                               factor
                                  variable
                                   ID a -> [MUL *]
                                  success variable
                               success factor
                                   MUL * -> [INTEGER_CONST 10]
                                 factor
                                    variable
                                    fail variable
                                    INTEGER_CONST 10 -> [PLUS +]
                                 success factor
                             success term*
                                 PLUS + -> [ID b]
                               term*
                                 factor
                                    variable
                                     ID b -> [MUL *]
                                    success variable
                                 success factor
                                     MUL * -> [INTEGER_CONST 2]
                                   factor
                                      variable
                                      fail variable
                                      INTEGER_CONST 2 -> [SEMI ;]
                                   success factor
                               success term*
                           success expr*
                         success assignment_statement
                      success statement
                        SEMI ; -> [END END]
                        statement
                           compound_statement
                           fail compound_statement
                           proccall_statement
                           fail proccall_statement
                           assignment_statement
                             variable
                             fail variable
                           fail assignment_statement
                           for_loop
                           fail for_loop
                        fail statement
                    success statement_list*
                    END END -> [SEMI ;]
                  success compound_statement
                success block
                SEMI ; -> [PROCEDURE PROCEDURE]
              success procedure_declaration
              procedure_declaration
                PROCEDURE PROCEDURE -> [ID Gamma]
                ID Gamma -> [LPAREN (]
                  LPAREN ( -> [ID a]
                  formal_parameter_list*
                    formal_parameters
                      ID a -> [COLON :]
                      COLON : -> [INTEGER INTEGER]
                      type_spec
                         INTEGER INTEGER -> [SEMI ;]
                      success type_spec
                    success formal_parameters
                      SEMI ; -> [ID b]
                      formal_parameters
                        ID b -> [COLON :]
                        COLON : -> [INTEGER INTEGER]
                        type_spec
                           INTEGER INTEGER -> [RPAREN )]
                        success type_spec
                      success formal_parameters
                  success formal_parameter_list*
                  RPAREN ) -> [SEMI ;]
                SEMI ; -> [VAR VAR]
                block
                  declarations*
                      VAR VAR -> [ID x]
                        variable_declaration
                          ID x -> [COLON :]
                          COLON : -> [INTEGER INTEGER]
                          type_spec
                             INTEGER INTEGER -> [SEMI ;]
                          success type_spec
                        success variable_declaration
                        SEMI ; -> [BEGIN BEGIN]
                        variable_declaration
                        fail variable_declaration
                     procedure_declaration
                     fail procedure_declaration
                  success declarations*
                  compound_statement
                    BEGIN BEGIN -> [ID x]
                    statement_list*
                      statement
                         compound_statement
                         fail compound_statement
                         proccall_statement
                           ID x -> [ASSIGN :=]
                         fail proccall_statement
                         assignment_statement
                           variable
                            ID x -> [ASSIGN :=]
                           success variable
                           ASSIGN := -> [ID a]
                           expr*
                             term*
                               factor
                                  variable
                                   ID a -> [MUL *]
                                  success variable
                               success factor
                                   MUL * -> [INTEGER_CONST 10]
                                 factor
                                    variable
                                    fail variable
                                    INTEGER_CONST 10 -> [PLUS +]
                                 success factor
                             success term*
                                 PLUS + -> [ID b]
                               term*
                                 factor
                                    variable
                                     ID b -> [MUL *]
                                    success variable
                                 success factor
                                     MUL * -> [INTEGER_CONST 2]
                                   factor
                                      variable
                                      fail variable
                                      INTEGER_CONST 2 -> [SEMI ;]
                                   success factor
                               success term*
                           success expr*
                         success assignment_statement
                      success statement
                        SEMI ; -> [END END]
                        statement
                           compound_statement
                           fail compound_statement
                           proccall_statement
                           fail proccall_statement
                           assignment_statement
                             variable
                             fail variable
                           fail assignment_statement
                           for_loop
                           fail for_loop
                        fail statement
                    success statement_list*
                    END END -> [SEMI ;]
                  success compound_statement
                success block
                SEMI ; -> [BEGIN BEGIN]
              success procedure_declaration
              procedure_declaration
              fail procedure_declaration
           success declarations*
           compound_statement
             BEGIN BEGIN -> [ID x]
             statement_list*
               statement
                  compound_statement
                  fail compound_statement
                  proccall_statement
                    ID x -> [ASSIGN :=]
                  fail proccall_statement
                  assignment_statement
                    variable
                     ID x -> [ASSIGN :=]
                    success variable
                    ASSIGN := -> [LPAREN (]
                    expr*
                      term*
                        factor
                           variable
                           fail variable
                            LPAREN ( -> [ID a]
                            expr*
                              term*
                                factor
                                   variable
                                    ID a -> [PLUS +]
                                   success variable
                                success factor
                              success term*
                                  PLUS + -> [ID b]
                                term*
                                  factor
                                     variable
                                      ID b -> [RPAREN )]
                                     success variable
                                  success factor
                                success term*
                            success expr*
                            RPAREN ) -> [MUL *]
                        success factor
                            MUL * -> [INTEGER_CONST 2]
                          factor
                             variable
                             fail variable
                             INTEGER_CONST 2 -> [SEMI ;]
                          success factor
                      success term*
                    success expr*
                  success assignment_statement
               success statement
                 SEMI ; -> [ID Beta]
                 statement
                    compound_statement
                    fail compound_statement
                    proccall_statement
                      ID Beta -> [LPAREN (]
                      LPAREN ( -> [INTEGER_CONST 5]
                      actual_parameter_list*
                         expr*
                           term*
                             factor
                                variable
                                fail variable
                                INTEGER_CONST 5 -> [COMMA ,]
                             success factor
                           success term*
                         success expr*
                           COMMA , -> [INTEGER_CONST 10]
                           expr*
                             term*
                               factor
                                  variable
                                  fail variable
                                  INTEGER_CONST 10 -> [RPAREN )]
                               success factor
                             success term*
                           success expr*
                      success actual_parameter_list*
                      RPAREN ) -> [SEMI ;]
                    success proccall_statement
                 success statement
                 SEMI ; -> [END END]
                 statement
                    compound_statement
                    fail compound_statement
                    proccall_statement
                    fail proccall_statement
                    assignment_statement
                      variable
                      fail variable
                    fail assignment_statement
                    for_loop
                    fail for_loop
                 fail statement
             success statement_list*
             END END -> [SEMI ;]
           success compound_statement
         success block
         SEMI ; -> [BEGIN BEGIN]
       success procedure_declaration
       procedure_declaration
       fail procedure_declaration
    success declarations*
    compound_statement
      BEGIN BEGIN -> [ID Alpha]
      statement_list*
        statement
           compound_statement
           fail compound_statement
           proccall_statement
             ID Alpha -> [LPAREN (]
             LPAREN ( -> [INTEGER_CONST 3]
             actual_parameter_list*
                expr*
                  term*
                    factor
                       variable
                       fail variable
                       INTEGER_CONST 3 -> [PLUS +]
                    success factor
                  success term*
                      PLUS + -> [INTEGER_CONST 5]
                    term*
                      factor
                         variable
                         fail variable
                         INTEGER_CONST 5 -> [COMMA ,]
                      success factor
                    success term*
                success expr*
                  COMMA , -> [INTEGER_CONST 7]
                  expr*
                    term*
                      factor
                         variable
                         fail variable
                         INTEGER_CONST 7 -> [RPAREN )]
                      success factor
                    success term*
                  success expr*
             success actual_parameter_list*
             RPAREN ) -> [SEMI ;]
           success proccall_statement
        success statement
          SEMI ; -> [FOR FOR]
          statement
             compound_statement
             fail compound_statement
             proccall_statement
             fail proccall_statement
             assignment_statement
               variable
               fail variable
             fail assignment_statement
             for_loop
               FOR FOR -> [ID y]
               assignment_statement
                 variable
                  ID y -> [ASSIGN :=]
                 success variable
                 ASSIGN := -> [INTEGER_CONST 1]
                 expr*
                   term*
                     factor
                        variable
                        fail variable
                        INTEGER_CONST 1 -> [TO TO]
                     success factor
                   success term*
                 success expr*
               success assignment_statement
               TO TO -> [INTEGER_CONST 10]
               expr*
                 term*
                   factor
                      variable
                      fail variable
                      INTEGER_CONST 10 -> [DO DO]
                   success factor
                 success term*
               success expr*
               DO DO -> [BEGIN BEGIN]
               compound_statement
                 BEGIN BEGIN -> [ID Alpha]
                 statement_list*
                   statement
                      compound_statement
                      fail compound_statement
                      proccall_statement
                        ID Alpha -> [LPAREN (]
                        LPAREN ( -> [INTEGER_CONST 35]
                        actual_parameter_list*
                           expr*
                             term*
                               factor
                                  variable
                                  fail variable
                                  INTEGER_CONST 35 -> [COMMA ,]
                               success factor
                             success term*
                           success expr*
                             COMMA , -> [ID y]
                             expr*
                               term*
                                 factor
                                    variable
                                     ID y -> [RPAREN )]
                                    success variable
                                 success factor
                               success term*
                             success expr*
                        success actual_parameter_list*
                        RPAREN ) -> [SEMI ;]
                      success proccall_statement
                   success statement
                     SEMI ; -> [END END]
                     statement
                        compound_statement
                        fail compound_statement
                        proccall_statement
                        fail proccall_statement
                        assignment_statement
                          variable
                          fail variable
                        fail assignment_statement
                        for_loop
                        fail for_loop
                     fail statement
                 success statement_list*
                 END END -> [SEMI ;]
               success compound_statement
             success for_loop
          success statement
          SEMI ; -> [END END]
          statement
             compound_statement
             fail compound_statement
             proccall_statement
             fail proccall_statement
             assignment_statement
               variable
               fail variable
             fail assignment_statement
             for_loop
             fail for_loop
          fail statement
      success statement_list*
      END END -> [DOT .]
    success compound_statement
  success block
  DOT .
Symbol program Parsed until (35,6) 469 of 469

Analyzer
 Program Main 1 0
    var Main.y of {"INTEGER":"INTEGER"}
    procedure Main Alpha
      var Alpha.a of {"INTEGER":"INTEGER"}
      var Alpha.b of {"INTEGER":"INTEGER"}
       var Alpha.x of {"INTEGER":"INTEGER"}
       procedure Alpha Beta
         var Beta.a of {"INTEGER":"INTEGER"}
         var Beta.b of {"INTEGER":"INTEGER"}
          var Beta.x of {"INTEGER":"INTEGER"}
            Assign x =
       0 formal_parameters a {"INTEGER":"INTEGER"} 3
       1 formal_parameters b {"INTEGER":"INTEGER"} 3
       2 variable_declaration x {"INTEGER":"INTEGER"} 3
       procedure Alpha Gamma
         var Gamma.a of {"INTEGER":"INTEGER"}
         var Gamma.b of {"INTEGER":"INTEGER"}
          var Gamma.x of {"INTEGER":"INTEGER"}
            Assign x =
       0 formal_parameters a {"INTEGER":"INTEGER"} 3
       1 formal_parameters b {"INTEGER":"INTEGER"} 3
       2 variable_declaration x {"INTEGER":"INTEGER"} 3
         Assign x =
    0 formal_parameters a {"INTEGER":"INTEGER"} 2
    1 formal_parameters b {"INTEGER":"INTEGER"} 2
    2 variable_declaration x {"INTEGER":"INTEGER"} 2
    3 procedure_declaration Beta  2
    4 procedure_declaration Gamma  2
       Assign y =
 0 variable_declaration y {"INTEGER":"INTEGER"} 1
 1 procedure_declaration Alpha  1

interpret Main 1 2 1
scope variable_declaration y {"INTEGER":"INTEGER"} 1
scope procedure_declaration Alpha  1
 program name ["variable"]["ID"]
 Program Main Main
    Save block of Alpha
      ProcedureCall Alpha Alpha Alpha
        3 + 5 = 8
      b = 7
      a = 8
         Save block of Beta
         Save block of Gamma
               8 + 7 = 15
             15 * 2 = 30
           x := 30
           ProcedureCall Beta Beta Beta
           b = 10
           a = 5
                  5 * 10 = 50
                  10 * 2 = 20
                 50 + 20 = 70
                x := 70
      for loop
       y := 1
      iteration 0
          ProcedureCall Alpha Alpha Alpha
          b = 0
          a = 35
             Save block of Beta
             Save block of Gamma
                   35 + 0 = 35
                 35 * 2 = 70
               x := 70
               ProcedureCall Beta Beta Beta
               b = 10
               a = 5
                      5 * 10 = 50
                      10 * 2 = 20
                     50 + 20 = 70
                    x := 70
      iteration 1
          ProcedureCall Alpha Alpha Alpha
          b = 1
          a = 35
             Save block of Beta
             Save block of Gamma
                   35 + 1 = 36
                 36 * 2 = 72
               x := 72
               ProcedureCall Beta Beta Beta
               b = 10
               a = 5
                      5 * 10 = 50
                      10 * 2 = 20
                     50 + 20 = 70
                    x := 70
