setup 0 bytes free
open wled.json 0 ✓
definitionTree 16384 => 0 ✓
open Examples/Mover.wled 0 ✓
programFile size 475 bytes
parseTree 65536 => 0 ✓
 PROGRAM PROGRAM -> [ID Mover] 0
 ID Mover -> [LCURL {] 0
  LCURL { -> [FUNCTION FUNCTION] 1
     FUNCTION FUNCTION -> [ID renderFrame] 4
     ID renderFrame -> [LPAREN (] 4
      LPAREN ( -> [RPAREN )] 5
      found formals
      RPAREN ) -> [LCURL {] 5
      LCURL { -> [ID locn] 5
         ID locn -> [ASSIGN =] 8
         found varref
           ASSIGN = -> [ID millis] 10
         found assignoperator
             ID millis -> [LPAREN (] 12
             LPAREN ( -> [RPAREN )] 12
             found actuals
             RPAREN ) -> [DIV /] 12
            found call
           found factor
             DIV / -> [INTEGER_CONST 100] 12
             INTEGER_CONST 100 -> [FOR FOR] 12
            found factor
          found term
         found expr
        found assign
       found statement
         FOR FOR -> [LPAREN (] 8
         LPAREN ( -> [ID i] 8
          ID i -> [ASSIGN =] 9
          found varref
            ASSIGN = -> [INTEGER_CONST 0] 11
          found assignoperator
             INTEGER_CONST 0 -> [SEMI ;] 12
            found factor
           found term
          found expr
         found assign
         SEMI ; -> [ID i] 8
             ID i -> [LT <] 12
            ID i -> [LT <] 11
            found varref
           found factor
          found term
            LT < -> [ID ledCount] 11
              ID ledCount -> [SEMI ;] 13
             ID ledCount -> [SEMI ;] 12
             found varref
            found factor
           found term
         found expr
         SEMI ; -> [ID i] 8
           ID i -> [ASSIGN+ +=] 10
           found varref
             ASSIGN+ += -> [INTEGER_CONST 30] 12
           found assignoperator
              INTEGER_CONST 30 -> [RPAREN )] 13
             found factor
            found term
           found expr
          found assign
         found increment
         RPAREN ) -> [LCURL {] 8
          LCURL { -> [ID leds] 9
             ID leds -> [LBRACKET [] 12
             found varref
              LBRACKET [ -> [ID locn] 13
                   ID locn -> [PLUS +] 18
                  ID locn -> [PLUS +] 17
                  found varref
                 found factor
                found term
                  PLUS + -> [ID i] 17
                    ID i -> [RBRACKET ]] 19
                   ID i -> [RBRACKET ]] 18
                   found varref
                  found factor
                 found term
               found expr
              found indices
              RBRACKET ] -> [ASSIGN =] 13
               ASSIGN = -> [ID colorWheel] 14
             found assignoperator
                 ID colorWheel -> [LPAREN (] 16
                 LPAREN ( -> [INTEGER_CONST 50] 16
                     INTEGER_CONST 50 -> [RPAREN )] 20
                    found factor
                   found term
                  found expr
                 found actuals
                 RPAREN ) -> [ID leds] 16
                found call
               found factor
              found term
             found expr
            found assign
           found statement
             ID leds -> [LBRACKET [] 12
             found varref
              LBRACKET [ -> [ID locn] 13
                   ID locn -> [PLUS +] 18
                  ID locn -> [PLUS +] 17
                  found varref
                 found factor
                found term
                  PLUS + -> [ID i] 17
                    ID i -> [PLUS +] 19
                   ID i -> [PLUS +] 18
                   found varref
                  found factor
                 found term
                  PLUS + -> [INTEGER_CONST 10] 17
                   INTEGER_CONST 10 -> [RBRACKET ]] 18
                  found factor
                 found term
               found expr
              found indices
              RBRACKET ] -> [ASSIGN =] 13
               ASSIGN = -> [ID colorWheel] 14
             found assignoperator
                 ID colorWheel -> [LPAREN (] 16
                 LPAREN ( -> [INTEGER_CONST 125] 16
                     INTEGER_CONST 125 -> [RPAREN )] 20
                    found factor
                   found term
                  found expr
                 found actuals
                 RPAREN ) -> [ID leds] 16
                found call
               found factor
              found term
             found expr
            found assign
           found statement
             ID leds -> [LBRACKET [] 12
             found varref
              LBRACKET [ -> [ID locn] 13
                   ID locn -> [PLUS +] 18
                  ID locn -> [PLUS +] 17
                  found varref
                 found factor
                found term
                  PLUS + -> [ID i] 17
                    ID i -> [PLUS +] 19
                   ID i -> [PLUS +] 18
                   found varref
                  found factor
                 found term
                  PLUS + -> [INTEGER_CONST 20] 17
                   INTEGER_CONST 20 -> [RBRACKET ]] 18
                  found factor
                 found term
               found expr
              found indices
              RBRACKET ] -> [ASSIGN =] 13
               ASSIGN = -> [ID colorWheel] 14
             found assignoperator
                 ID colorWheel -> [LPAREN (] 16
                 LPAREN ( -> [INTEGER_CONST 200] 16
                     INTEGER_CONST 200 -> [RPAREN )] 20
                    found factor
                   found term
                  found expr
                 found actuals
                 RPAREN ) -> [RCURL }] 16
                found call
               found factor
              found term
             found expr
            found assign
           found statement
          RCURL } -> [RCURL }] 9
         found block
        found for
       found statement
      RCURL } -> [RCURL }] 5
     found block
    found function
   found statement
  RCURL } 1
 found block
Symbol program Parsed until (18,1) 475 of 475
definitionTree 9966 / 60% (23 0 6)
parseTree      12638 / 19% (1 0 25)
garbageCollect 9086 / 13% (1 0 25)
Destruct Lexer
parse 0 ✓

Optimizer
              symbol to shrink factor in term = {"INTEGER_CONST":"0"} from {"factor":{"INTEGER_CONST":"0"}}
             symbol to shrink factor in term = {"varref":{"ID":"i"}} from {"factor":{"varref":{"ID":"i"}}}
               symbol to shrink factor in term = {"varref":{"ID":"ledCount"}} from {"factor":{"varref":{"ID":"ledCount"}}}
               symbol to shrink factor in term = {"INTEGER_CONST":"30"} from {"factor":{"INTEGER_CONST":"30"}}
                   symbol to shrink factor in term = {"varref":{"ID":"locn"}} from {"factor":{"varref":{"ID":"locn"}}}
                     symbol to shrink factor in term = {"varref":{"ID":"i"}} from {"factor":{"varref":{"ID":"i"}}}
                       symbol to shrink factor in term = {"INTEGER_CONST":"50"} from {"factor":{"INTEGER_CONST":"50"}}
                  symbol to shrink factor in term = {"call":{"ID":"colorWheel","actuals":{"expr":{"term":{"INTEGER_CONST":"50"}}}}} from {"factor":{"call":{"ID":"colorWheel","actuals":{"expr":{"term":{"INTEGER_CONST":"50"}}}}}}
                   symbol to shrink factor in term = {"varref":{"ID":"locn"}} from {"factor":{"varref":{"ID":"locn"}}}
                     symbol to shrink factor in term = {"varref":{"ID":"i"}} from {"factor":{"varref":{"ID":"i"}}}
                     symbol to shrink factor in term = {"INTEGER_CONST":"10"} from {"factor":{"INTEGER_CONST":"10"}}
                       symbol to shrink factor in term = {"INTEGER_CONST":"125"} from {"factor":{"INTEGER_CONST":"125"}}
                  symbol to shrink factor in term = {"call":{"ID":"colorWheel","actuals":{"expr":{"term":{"INTEGER_CONST":"125"}}}}} from {"factor":{"call":{"ID":"colorWheel","actuals":{"expr":{"term":{"INTEGER_CONST":"125"}}}}}}
                   symbol to shrink factor in term = {"varref":{"ID":"locn"}} from {"factor":{"varref":{"ID":"locn"}}}
                     symbol to shrink factor in term = {"varref":{"ID":"i"}} from {"factor":{"varref":{"ID":"i"}}}
                     symbol to shrink factor in term = {"INTEGER_CONST":"20"} from {"factor":{"INTEGER_CONST":"20"}}
                       symbol to shrink factor in term = {"INTEGER_CONST":"200"} from {"factor":{"INTEGER_CONST":"200"}}
                  symbol to shrink factor in term = {"call":{"ID":"colorWheel","actuals":{"expr":{"term":{"INTEGER_CONST":"200"}}}}} from {"factor":{"call":{"ID":"colorWheel","actuals":{"expr":{"term":{"INTEGER_CONST":"200"}}}}}}
optimize 0 ✓

Analyzer
 Program Mover 1 0
     Function Mover.renderFrame
         assign renderFrame.locn of notype
         assign locn = (8)
             Ext Function found millis (12)
          assign renderFrame.i of notype
          assign i = (9)
            VarRef found renderFrame.i (11)
              Ext Variable found ledCount (13) varref
           assign i = (10)
           asop +=
              Ext Variable found leds (13) assign
              assign leds = (13)
                 Ext Function found colorWheel (16)
                  VarRef found renderFrame.locn (17)
                    VarRef found renderFrame.i (19)
              Ext Variable found leds (13) assign
              assign leds = (13)
                 Ext Function found colorWheel (16)
                  VarRef found renderFrame.locn (17)
                    VarRef found renderFrame.i (19)
              Ext Variable found leds (13) assign
              assign leds = (13)
                 Ext Function found colorWheel (16)
                  VarRef found renderFrame.locn (17)
                    VarRef found renderFrame.i (19)
     0 assign renderFrame.locn of 9 (2)
     1 assign renderFrame.i of 9 (2)
 0 function Mover.renderFrame of 9 (1)
analyze 0 ✓

interpret Mover 1 1
 program Mover
     Save block of renderFrame
Interpret main 0 ✓
         Call renderFrame (1)
                 Call millis() = 1000.000000
                  DIV / (Push 2)
                   INTEGER_CONST 100 (Push 3)
               1000.000000 / 100.000000 = 10.000000 (push 4)
             renderFrame.locn := 10.000000 (pop 0) 2-0
             For (0)
                 INTEGER_CONST 0 (Push 1)
              renderFrame.i := 0.000000 (pop 0) 2-1
             iteration
             check to condition
                varref renderFrame.i = 0.000000 (push 1) 2-1
                 LT < (Push 2)
                  varref ext.ledCount = 3.000000 (push 3)
              0.000000 < 3.000000 = 1.000000 (push 4)
             conditionResult (pop 0)
             1 => run block
                     varref renderFrame.locn = 10.000000 (push 1) 2-0
                      PLUS + (Push 2)
                       varref renderFrame.i = 0.000000 (push 3) 2-1
                   10.000000 + 0.000000 = 10.000000 (push 4)
                       INTEGER_CONST 50 (Push 2)
                    Call colorWheel(50.000000) = 50.000000
arti_set_external_variable: leds(10.000000) := 50.000000
                 assign set ext.leds[10.000000] = 50.000000 (1)
                     varref renderFrame.locn = 10.000000 (push 1) 2-0
                      PLUS + (Push 2)
                       varref renderFrame.i = 0.000000 (push 3) 2-1
                      PLUS + (Push 4)
                       INTEGER_CONST 10 (Push 5)
                   10.000000 + 0.000000 = 10.000000 (push 6)
                   10.000000 + 10.000000 = 20.000000 (push 6)
                       INTEGER_CONST 125 (Push 2)
                    Call colorWheel(125.000000) = 125.000000
arti_set_external_variable: leds(20.000000) := 125.000000
                 assign set ext.leds[20.000000] = 125.000000 (1)
                     varref renderFrame.locn = 10.000000 (push 1) 2-0
                      PLUS + (Push 2)
                       varref renderFrame.i = 0.000000 (push 3) 2-1
                      PLUS + (Push 4)
                       INTEGER_CONST 20 (Push 5)
                   10.000000 + 0.000000 = 10.000000 (push 6)
                   10.000000 + 20.000000 = 30.000000 (push 6)
                       INTEGER_CONST 200 (Push 2)
                    Call colorWheel(200.000000) = 200.000000
arti_set_external_variable: leds(30.000000) := 200.000000
                 assign set ext.leds[30.000000] = 200.000000 (1)
             assign next value
                 INTEGER_CONST 30 (Push 1)
              renderFrame.i += 30.000000 (pop 0) 2-1
             iteration
             check to condition
                varref renderFrame.i = 30.000000 (push 1) 2-1
                 LT < (Push 2)
                  varref ext.ledCount = 3.000000 (push 3)
              30.000000 < 3.000000 = 0.000000 (push 4)
             conditionResult (pop 0)
             0 => end of For
Destruct activation record renderFrame
setPixels(leds)
         Call renderFrame (1)
                 Call millis() = 1000.000000
                  DIV / (Push 2)
                   INTEGER_CONST 100 (Push 3)
               1000.000000 / 100.000000 = 10.000000 (push 4)
             renderFrame.locn := 10.000000 (pop 0) 2-0
             For (0)
                 INTEGER_CONST 0 (Push 1)
              renderFrame.i := 0.000000 (pop 0) 2-1
             iteration
             check to condition
                varref renderFrame.i = 0.000000 (push 1) 2-1
                 LT < (Push 2)
                  varref ext.ledCount = 3.000000 (push 3)
              0.000000 < 3.000000 = 1.000000 (push 4)
             conditionResult (pop 0)
             1 => run block
                     varref renderFrame.locn = 10.000000 (push 1) 2-0
                      PLUS + (Push 2)
                       varref renderFrame.i = 0.000000 (push 3) 2-1
                   10.000000 + 0.000000 = 10.000000 (push 4)
                       INTEGER_CONST 50 (Push 2)
                    Call colorWheel(50.000000) = 50.000000
arti_set_external_variable: leds(10.000000) := 50.000000
                 assign set ext.leds[10.000000] = 50.000000 (1)
                     varref renderFrame.locn = 10.000000 (push 1) 2-0
                      PLUS + (Push 2)
                       varref renderFrame.i = 0.000000 (push 3) 2-1
                      PLUS + (Push 4)
                       INTEGER_CONST 10 (Push 5)
                   10.000000 + 0.000000 = 10.000000 (push 6)
                   10.000000 + 10.000000 = 20.000000 (push 6)
                       INTEGER_CONST 125 (Push 2)
                    Call colorWheel(125.000000) = 125.000000
arti_set_external_variable: leds(20.000000) := 125.000000
                 assign set ext.leds[20.000000] = 125.000000 (1)
                     varref renderFrame.locn = 10.000000 (push 1) 2-0
                      PLUS + (Push 2)
                       varref renderFrame.i = 0.000000 (push 3) 2-1
                      PLUS + (Push 4)
                       INTEGER_CONST 20 (Push 5)
                   10.000000 + 0.000000 = 10.000000 (push 6)
                   10.000000 + 20.000000 = 30.000000 (push 6)
                       INTEGER_CONST 200 (Push 2)
                    Call colorWheel(200.000000) = 200.000000
arti_set_external_variable: leds(30.000000) := 200.000000
                 assign set ext.leds[30.000000] = 200.000000 (1)
             assign next value
                 INTEGER_CONST 30 (Push 1)
              renderFrame.i += 30.000000 (pop 0) 2-1
             iteration
             check to condition
                varref renderFrame.i = 30.000000 (push 1) 2-1
                 LT < (Push 2)
                  varref ext.ledCount = 3.000000 (push 3)
              30.000000 < 3.000000 = 0.000000 (push 4)
             conditionResult (pop 0)
             0 => end of For
Destruct activation record renderFrame
setPixels(leds)
closing Arti 0
Destruct callstack
Destruct valueStack
Destruct Symbol locn (0)
Destruct Symbol i (0)
Destruct ScopedSymbolTable renderFrame (0)
Destruct Symbol renderFrame (0)
Destruct ScopedSymbolTable Mover (0)
definitionJson  9966 / 60% (23 0 6)
parseTree       11774 / 17% (1 0 23)
closed Arti 0 ✓
