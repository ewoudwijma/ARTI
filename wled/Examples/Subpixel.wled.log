 PROGRAM PROGRAM -> [ID Subpixel] 0
 ID Subpixel -> [LCURL {] 0
 block 0
  LCURL { -> [ID t] 1
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     ID t -> [ASSIGN =] 4
     success varleft
     ASSIGN = -> [INTEGER_CONST 0] 4
     expr 4
      term 5
       factor 6
        call 7
        fail call
        varref 7
        fail varref
        INTEGER_CONST 0 -> [FUNCTION FUNCTION] 7
       success factor
      remove multiple key (5)
      remove multiple empty (5)
      success term
     remove key/value ASSIGN = (4)
     remove multiple key (4)
     remove multiple empty (4)
     success expr
    success assign
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderFrame] 4
     ID renderFrame -> [LPAREN (] 4
      LPAREN ( -> [RPAREN )] 5
      formals 5
       formal 6
       fail formal
      remove key/value FUNCTION FUNCTION (5)
      remove key/value LPAREN ( (5)
      remove empty values for key formals (5)
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [ID t] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID t -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID millis] 8
         expr 8
          term 9
           factor 10
            call 11
             ID millis -> [LPAREN (] 12
             LPAREN ( -> [RPAREN )] 12
             actuals 12
              expr 13
               term 14
                factor 15
                 call 16
                 fail call
                 varref 16
                 fail varref
                fail factor
               fail term
              fail expr
             remove key/value LPAREN ( (12)
             remove empty values for key actuals (12)
             success actuals
             RPAREN ) -> [DIV /] 12
            success call
           success factor
             DIV / -> [INTEGER_CONST 1000] 12
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 1000 -> [ID t] 12
            success factor
          remove multiple key (9)
          success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         remove multiple empty (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID t -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID sin] 8
         expr 8
          term 9
           factor 10
            call 11
             ID sin -> [LPAREN (] 12
             LPAREN ( -> [ID t] 12
             actuals 12
              expr 13
               term 14
                factor 15
                 call 16
                  ID t -> [RPAREN )] 17
                 fail call
                 varref 16
                 ID t -> [RPAREN )] 16
                 success varref
                success factor
               remove multiple key (14)
               remove multiple empty (14)
               success term
              remove multiple key (13)
              remove multiple empty (13)
              success expr
             remove key/value LPAREN ( (12)
             remove multiple key (12)
             remove multiple empty (12)
             success actuals
             RPAREN ) -> [ID t] 12
            success call
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         remove multiple empty (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID t -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID t] 8
         expr 8
          term 9
           factor 10
            call 11
             ID t -> [PLUS +] 12
            fail call
            varref 11
            ID t -> [PLUS +] 11
            success varref
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            PLUS + -> [INTEGER_CONST 1] 11
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 1 -> [ID t] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID t -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID t] 8
         expr 8
          term 9
           factor 10
            call 11
             ID t -> [DIV /] 12
            fail call
            varref 11
            ID t -> [DIV /] 11
            success varref
           success factor
             DIV / -> [INTEGER_CONST 2] 12
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 2 -> [ID t] 12
            success factor
          remove multiple key (9)
          success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         remove multiple empty (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID t -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID t] 8
         expr 8
          term 9
           factor 10
            call 11
             ID t -> [MUL *] 12
            fail call
            varref 11
            ID t -> [MUL *] 11
            success varref
           success factor
             MUL * -> [ID ledCount] 12
            factor 11
             call 12
              ID ledCount -> [RCURL }] 13
             fail call
             varref 12
             ID ledCount -> [RCURL }] 12
             success varref
            success factor
          remove multiple key (9)
          success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         remove multiple empty (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [FUNCTION FUNCTION] 5
     remove key/value RPAREN ) (4)
     remove multiple key (4)
     success block
    success function
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderLed] 4
     ID renderLed -> [LPAREN (] 4
      LPAREN ( -> [ID i] 5
      formals 5
       formal 6
       ID i -> [RPAREN )] 6
       success formal
      remove key/value FUNCTION FUNCTION (5)
      remove key/value LPAREN ( (5)
      remove multiple key (5)
      remove multiple empty (5)
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [ID diff] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID diff -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID abs] 8
         expr 8
          term 9
           factor 10
            call 11
             ID abs -> [LPAREN (] 12
             LPAREN ( -> [ID t] 12
             actuals 12
              expr 13
               term 14
                factor 15
                 call 16
                  ID t -> [MINUS -] 17
                 fail call
                 varref 16
                 ID t -> [MINUS -] 16
                 success varref
                success factor
               remove multiple key (14)
               remove multiple empty (14)
               success term
                 MINUS - -> [ID i] 16
                term 15
                 factor 16
                  call 17
                   ID i -> [RPAREN )] 18
                  fail call
                  varref 17
                  ID i -> [RPAREN )] 17
                  success varref
                 success factor
                remove multiple key (15)
                remove multiple empty (15)
                success term
              remove multiple key (13)
              success expr
             remove key/value LPAREN ( (12)
             remove multiple key (12)
             remove multiple empty (12)
             success actuals
             RPAREN ) -> [IF IF] 12
            success call
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         remove multiple empty (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
         IF IF -> [LPAREN (] 8
         LPAREN ( -> [ID diff] 8
         expr 8
          term 9
           factor 10
            call 11
             ID diff -> [GT >] 12
            fail call
            varref 11
            ID diff -> [GT >] 11
            success varref
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            GT > -> [INTEGER_CONST 2] 11
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 2 -> [RPAREN )] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
         remove key/value IF IF (8)
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success expr
         RPAREN ) -> [LCURL {] 8
         block 8
          LCURL { -> [ID diff] 9
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             ID diff -> [ASSIGN =] 12
             success varleft
             ASSIGN = -> [INTEGER_CONST 2] 12
             expr 12
              term 13
               factor 14
                call 15
                fail call
                varref 15
                fail varref
                INTEGER_CONST 2 -> [RCURL }] 15
               success factor
              remove multiple key (13)
              remove multiple empty (13)
              success term
             remove key/value ASSIGN = (12)
             remove multiple key (12)
             remove multiple empty (12)
             success expr
            success assign
           success statement
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             fail varleft
            fail assign
            function 11
            fail function
            call 11
            fail call
            for 11
            fail for
            if 11
            fail if
            block 11
            fail block
           fail statement
          RCURL } -> [ID bri] 9
         remove key/value RPAREN ) (8)
         remove multiple key (8)
         success block
        success if
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID bri -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [INTEGER_CONST 256] 8
         expr 8
          term 9
           factor 10
            call 11
            fail call
            varref 11
            fail varref
            INTEGER_CONST 256 -> [MINUS -] 11
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            MINUS - -> [ID diff] 11
           term 10
            factor 11
             call 12
              ID diff -> [MUL *] 13
             fail call
             varref 12
             ID diff -> [MUL *] 12
             success varref
            success factor
              MUL * -> [INTEGER_CONST 128] 13
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 128 -> [ID leds] 13
             success factor
           remove multiple key (10)
           success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID leds -> [LBRACKET [] 8
         success varleft
          LBRACKET [ -> [ID i] 9
          indices 9
           expr 10
            term 11
             factor 12
              call 13
               ID i -> [RBRACKET ]] 14
              fail call
              varref 13
              ID i -> [RBRACKET ]] 13
              success varref
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
          remove key/value LBRACKET [ (9)
          remove multiple key (9)
          remove multiple empty (9)
          success indices
          RBRACKET ] -> [ASSIGN =] 9
         ASSIGN = -> [ID hsv] 8
         expr 8
          term 9
           factor 10
            call 11
             ID hsv -> [LPAREN (] 12
             LPAREN ( -> [INTEGER_CONST 0] 12
             actuals 12
              expr 13
               term 14
                factor 15
                 call 16
                 fail call
                 varref 16
                 fail varref
                 INTEGER_CONST 0 -> [COMMA ,] 16
                success factor
               remove multiple key (14)
               remove multiple empty (14)
               success term
              remove multiple key (13)
              remove multiple empty (13)
              success expr
               COMMA , -> [INTEGER_CONST 255] 14
               expr 14
                term 15
                 factor 16
                  call 17
                  fail call
                  varref 17
                  fail varref
                  INTEGER_CONST 255 -> [COMMA ,] 17
                 success factor
                remove multiple key (15)
                remove multiple empty (15)
                success term
               remove multiple key (14)
               remove multiple empty (14)
               success expr
               COMMA , -> [ID bri] 14
               expr 14
                term 15
                 factor 16
                  call 17
                   ID bri -> [RPAREN )] 18
                  fail call
                  varref 17
                  ID bri -> [RPAREN )] 17
                  success varref
                 success factor
                remove multiple key (15)
                remove multiple empty (15)
                success term
               remove multiple key (14)
               remove multiple empty (14)
               success expr
             remove key/value LPAREN ( (12)
             remove multiple key (12)
             success actuals
             RPAREN ) -> [RCURL }] 12
            success call
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
         remove key/value RBRACKET ] (8)
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         remove multiple empty (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [RCURL }] 5
     remove key/value RPAREN ) (4)
     remove multiple key (4)
     success block
    success function
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
    fail function
    call 3
    fail call
    for 3
    fail for
    if 3
    fail if
    block 3
    fail block
   fail statement
  RCURL } 1
 remove key/value PROGRAM PROGRAM (0)
 remove multiple key (0)
 success block
Symbol program Parsed until (25,1) 546 of 546
par mem 15858 of 54600 54600 1 0 23
prog size 546 factor 29
par mem 7734 of 54600 54600 1 0 23
Destruct Lexer

Analyzer
 Program Subpixel 1 0
     Assign Subpixel.t of notype
     Assign t = (4)
     Function Subpixel.renderFrame
         Assign t = (8)
             Ext Function found millis (12)
         Assign t = (8)
             Ext Function found sin (12)
                 VarRef found Subpixel.t (16)
         Assign t = (8)
             VarRef found Subpixel.t (12)
         Assign t = (8)
             VarRef found Subpixel.t (12)
         Assign t = (8)
             VarRef found Subpixel.t (12)
               Ext Variable found ledCount (14)
     Function Subpixel.renderLed
      Formal renderLed.i of notype
         Assign renderLed.diff of notype
         Assign diff = (8)
             Ext Function found abs (12)
                 VarRef found Subpixel.t (16)
                   VarRef found renderLed.i (18)
             VarRef found renderLed.diff (12)
              Assign diff = (13)
         Assign renderLed.bri of notype
         Assign bri = (8)
               VarRef found renderLed.diff (14)
         Ext Variable found leds (8)
         Assign leds = (8)
             Ext Function found hsv (12)
                   VarRef found renderLed.bri (18)
              VarRef found renderLed.i (13)
     0 Formal renderLed.i notype 2
     1 Assign renderLed.diff notype 2
     2 Assign renderLed.bri notype 2
 0 Assign Subpixel.t notype 1
 1 Function Subpixel.renderFrame  1
 2 Function Subpixel.renderLed  1

interpret Subpixel 1 3
 program name ID
 Program Subpixel Subpixel
         INTEGER_CONST 0 (Push 1)
     Subpixel.t := 0.000000 (pop 0)
     Save block of renderFrame
     Save block of renderLed
         Call renderFrame (1)
                 Call millis() = 1000.000000
                  DIV / (Push 2)
                   INTEGER_CONST 1000 (Push 3)
               1000.000000 / 1000.000000 = 1.000000 (push 1)
             Subpixel.t := 1.000000 (pop 0)
                     VarRef Subpixel.t = 1.000000 (push 1)
                 Call sin(1.000000) = 0.841471
             Subpixel.t := 0.841471 (pop 0)
                 VarRef Subpixel.t = 0.841471 (push 1)
                 PLUS + (Push 2)
                   INTEGER_CONST 1 (Push 3)
              0.841471 + 1.000000 = 1.841471 (push 1)
             Subpixel.t := 1.841471 (pop 0)
                 VarRef Subpixel.t = 1.841471 (push 1)
                  DIV / (Push 2)
                   INTEGER_CONST 2 (Push 3)
               1.841471 / 2.000000 = 0.920735 (push 1)
             Subpixel.t := 0.920735 (pop 0)
                 VarRef Subpixel.t = 0.920735 (push 1)
                  MUL * (Push 2)
                   VarRef ext.ledCount = 3.000000 (push 3)
               0.920735 * 3.000000 = 2.762206 (push 1)
             Subpixel.t := 2.762206 (pop 0)
Destruct activation record renderFrame
                     VarRef Subpixel.t = 2.762206 (push 1)
                     MINUS - (Push 2)
                       VarRef renderLed.i = 0.000000 (push 3)
                  2.762206 - 0.000000 = 2.762206 (push 1)
                 Call abs(2.762206) = 2.762206
             renderLed.diff := 2.762206 (pop 0)
             If (0)
             if condition
                 VarRef renderLed.diff = 2.762206 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 2 (Push 3)
              2.762206 > 2.000000 = 1.000000 (push 1)
             (pop 0)
                      INTEGER_CONST 2 (Push 1)
                  renderLed.diff := 2.000000 (pop 0)
                 INTEGER_CONST 256 (Push 1)
                 MINUS - (Push 2)
                   VarRef renderLed.diff = 2.000000 (push 3)
                    MUL * (Push 4)
                     INTEGER_CONST 128 (Push 5)
                 2.000000 * 128.000000 = 256.000000 (push 3)
              256.000000 - 256.000000 = 0.000000 (push 1)
             renderLed.bri := 0.000000 (pop 0)
                  VarRef renderLed.i = 0.000000 (push 1)
                     INTEGER_CONST 0 (Push 2)
                       INTEGER_CONST 255 (Push 3)
                       VarRef renderLed.bri = 0.000000 (push 4)
hsv(0.000000, 255.000000, 0.000000)
                 Call hsv(0.000000, 255.000000, 0.000000) = 255.000000
arti_set_external_variable, set leds(0.000000, -32768.000000) to 255.000000
             Assign set ext.leds[0] = 255.000000 (1)
                     VarRef Subpixel.t = 2.762206 (push 1)
                     MINUS - (Push 2)
                       VarRef renderLed.i = 1.000000 (push 3)
                  2.762206 - 1.000000 = 1.762206 (push 1)
                 Call abs(1.762206) = 1.762206
             renderLed.diff := 1.762206 (pop 0)
             If (0)
             if condition
                 VarRef renderLed.diff = 1.762206 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 2 (Push 3)
              1.762206 > 2.000000 = 0.000000 (push 1)
             (pop 0)
                 INTEGER_CONST 256 (Push 1)
                 MINUS - (Push 2)
                   VarRef renderLed.diff = 1.762206 (push 3)
                    MUL * (Push 4)
                     INTEGER_CONST 128 (Push 5)
                 1.762206 * 128.000000 = 225.562429 (push 3)
              256.000000 - 225.562429 = 30.437571 (push 1)
             renderLed.bri := 30.437571 (pop 0)
                  VarRef renderLed.i = 1.000000 (push 1)
                     INTEGER_CONST 0 (Push 2)
                       INTEGER_CONST 255 (Push 3)
                       VarRef renderLed.bri = 30.437571 (push 4)
hsv(0.000000, 255.000000, 30.437571)
                 Call hsv(0.000000, 255.000000, 30.437571) = 285.437571
arti_set_external_variable, set leds(1.000000, -32768.000000) to 285.437571
             Assign set ext.leds[1] = 285.437571 (1)
                     VarRef Subpixel.t = 2.762206 (push 1)
                     MINUS - (Push 2)
                       VarRef renderLed.i = 2.000000 (push 3)
                  2.762206 - 2.000000 = 0.762206 (push 1)
                 Call abs(0.762206) = 0.762206
             renderLed.diff := 0.762206 (pop 0)
             If (0)
             if condition
                 VarRef renderLed.diff = 0.762206 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 2 (Push 3)
              0.762206 > 2.000000 = 0.000000 (push 1)
             (pop 0)
                 INTEGER_CONST 256 (Push 1)
                 MINUS - (Push 2)
                   VarRef renderLed.diff = 0.762206 (push 3)
                    MUL * (Push 4)
                     INTEGER_CONST 128 (Push 5)
                 0.762206 * 128.000000 = 97.562429 (push 3)
              256.000000 - 97.562429 = 158.437571 (push 1)
             renderLed.bri := 158.437571 (pop 0)
                  VarRef renderLed.i = 2.000000 (push 1)
                     INTEGER_CONST 0 (Push 2)
                       INTEGER_CONST 255 (Push 3)
                       VarRef renderLed.bri = 158.437571 (push 4)
hsv(0.000000, 255.000000, 158.437571)
                 Call hsv(0.000000, 255.000000, 158.437571) = 413.437571
arti_set_external_variable, set leds(2.000000, -32768.000000) to 413.437571
             Assign set ext.leds[2] = 413.437571 (1)
Destruct activation record renderLed
setPixels(-32768.000000)
         Call renderFrame (1)
                 Call millis() = 1000.000000
                  DIV / (Push 2)
                   INTEGER_CONST 1000 (Push 3)
               1000.000000 / 1000.000000 = 1.000000 (push 1)
             Subpixel.t := 1.000000 (pop 0)
                     VarRef Subpixel.t = 1.000000 (push 1)
                 Call sin(1.000000) = 0.841471
             Subpixel.t := 0.841471 (pop 0)
                 VarRef Subpixel.t = 0.841471 (push 1)
                 PLUS + (Push 2)
                   INTEGER_CONST 1 (Push 3)
              0.841471 + 1.000000 = 1.841471 (push 1)
             Subpixel.t := 1.841471 (pop 0)
                 VarRef Subpixel.t = 1.841471 (push 1)
                  DIV / (Push 2)
                   INTEGER_CONST 2 (Push 3)
               1.841471 / 2.000000 = 0.920735 (push 1)
             Subpixel.t := 0.920735 (pop 0)
                 VarRef Subpixel.t = 0.920735 (push 1)
                  MUL * (Push 2)
                   VarRef ext.ledCount = 3.000000 (push 3)
               0.920735 * 3.000000 = 2.762206 (push 1)
             Subpixel.t := 2.762206 (pop 0)
Destruct activation record renderFrame
                     VarRef Subpixel.t = 2.762206 (push 1)
                     MINUS - (Push 2)
                       VarRef renderLed.i = 0.000000 (push 3)
                  2.762206 - 0.000000 = 2.762206 (push 1)
                 Call abs(2.762206) = 2.762206
             renderLed.diff := 2.762206 (pop 0)
             If (0)
             if condition
                 VarRef renderLed.diff = 2.762206 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 2 (Push 3)
              2.762206 > 2.000000 = 1.000000 (push 1)
             (pop 0)
                      INTEGER_CONST 2 (Push 1)
                  renderLed.diff := 2.000000 (pop 0)
                 INTEGER_CONST 256 (Push 1)
                 MINUS - (Push 2)
                   VarRef renderLed.diff = 2.000000 (push 3)
                    MUL * (Push 4)
                     INTEGER_CONST 128 (Push 5)
                 2.000000 * 128.000000 = 256.000000 (push 3)
              256.000000 - 256.000000 = 0.000000 (push 1)
             renderLed.bri := 0.000000 (pop 0)
                  VarRef renderLed.i = 0.000000 (push 1)
                     INTEGER_CONST 0 (Push 2)
                       INTEGER_CONST 255 (Push 3)
                       VarRef renderLed.bri = 0.000000 (push 4)
hsv(0.000000, 255.000000, 0.000000)
                 Call hsv(0.000000, 255.000000, 0.000000) = 255.000000
arti_set_external_variable, set leds(0.000000, -32768.000000) to 255.000000
             Assign set ext.leds[0] = 255.000000 (1)
                     VarRef Subpixel.t = 2.762206 (push 1)
                     MINUS - (Push 2)
                       VarRef renderLed.i = 1.000000 (push 3)
                  2.762206 - 1.000000 = 1.762206 (push 1)
                 Call abs(1.762206) = 1.762206
             renderLed.diff := 1.762206 (pop 0)
             If (0)
             if condition
                 VarRef renderLed.diff = 1.762206 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 2 (Push 3)
              1.762206 > 2.000000 = 0.000000 (push 1)
             (pop 0)
                 INTEGER_CONST 256 (Push 1)
                 MINUS - (Push 2)
                   VarRef renderLed.diff = 1.762206 (push 3)
                    MUL * (Push 4)
                     INTEGER_CONST 128 (Push 5)
                 1.762206 * 128.000000 = 225.562429 (push 3)
              256.000000 - 225.562429 = 30.437571 (push 1)
             renderLed.bri := 30.437571 (pop 0)
                  VarRef renderLed.i = 1.000000 (push 1)
                     INTEGER_CONST 0 (Push 2)
                       INTEGER_CONST 255 (Push 3)
                       VarRef renderLed.bri = 30.437571 (push 4)
hsv(0.000000, 255.000000, 30.437571)
                 Call hsv(0.000000, 255.000000, 30.437571) = 285.437571
arti_set_external_variable, set leds(1.000000, -32768.000000) to 285.437571
             Assign set ext.leds[1] = 285.437571 (1)
                     VarRef Subpixel.t = 2.762206 (push 1)
                     MINUS - (Push 2)
                       VarRef renderLed.i = 2.000000 (push 3)
                  2.762206 - 2.000000 = 0.762206 (push 1)
                 Call abs(0.762206) = 0.762206
             renderLed.diff := 0.762206 (pop 0)
             If (0)
             if condition
                 VarRef renderLed.diff = 0.762206 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 2 (Push 3)
              0.762206 > 2.000000 = 0.000000 (push 1)
             (pop 0)
                 INTEGER_CONST 256 (Push 1)
                 MINUS - (Push 2)
                   VarRef renderLed.diff = 0.762206 (push 3)
                    MUL * (Push 4)
                     INTEGER_CONST 128 (Push 5)
                 0.762206 * 128.000000 = 97.562429 (push 3)
              256.000000 - 97.562429 = 158.437571 (push 1)
             renderLed.bri := 158.437571 (pop 0)
                  VarRef renderLed.i = 2.000000 (push 1)
                     INTEGER_CONST 0 (Push 2)
                       INTEGER_CONST 255 (Push 3)
                       VarRef renderLed.bri = 158.437571 (push 4)
hsv(0.000000, 255.000000, 158.437571)
                 Call hsv(0.000000, 255.000000, 158.437571) = 413.437571
arti_set_external_variable, set leds(2.000000, -32768.000000) to 413.437571
             Assign set ext.leds[2] = 413.437571 (1)
Destruct activation record renderLed
setPixels(-32768.000000)
Destruct callstack
Destruct valueStack
def mem 9435 of 12192 12192 24 0 6
par mem 7926 of 54600 54600 1 0 23
