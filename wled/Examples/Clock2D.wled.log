 PROGRAM PROGRAM -> [ID Clock2D] 0
 ID Clock2D -> [LCURL {] 0
 block 0
  LCURL { -> [FUNCTION FUNCTION] 1
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderFrame] 4
     ID renderFrame -> [LPAREN (] 4
      LPAREN ( -> [RPAREN )] 5
      formals 5
       formal 6
       fail formal
      remove key/value FUNCTION FUNCTION (5)
      remove key/value LPAREN ( (5)
      remove empty values for key formals (5)
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [ID setRange] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setRange -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setRange -> [LPAREN (] 8
         LPAREN ( -> [INTEGER_CONST 0] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 0 -> [COMMA ,] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
          remove multiple key (9)
          remove multiple empty (9)
          success expr
           COMMA , -> [ID ledCount] 10
           expr 10
            term 11
             factor 12
              call 13
               ID ledCount -> [COMMA ,] 14
              fail call
              varref 13
              ID ledCount -> [COMMA ,] 13
              success varref
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
           COMMA , -> [INTEGER_CONST 0] 10
           expr 10
            term 11
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 0 -> [RPAREN )] 13
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success actuals
         RPAREN ) -> [FOR FOR] 8
        success call
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
         FOR FOR -> [LPAREN (] 8
         LPAREN ( -> [ID i] 8
         assign 8
          varleft 9
          ID i -> [ASSIGN =] 9
          success varleft
          ASSIGN = -> [INTEGER_CONST 0] 9
          expr 9
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 0 -> [SEMI ;] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
          remove key/value ASSIGN = (9)
          remove multiple key (9)
          remove multiple empty (9)
          success expr
         remove key/value FOR FOR (8)
         remove key/value LPAREN ( (8)
         success assign
         SEMI ; -> [ID i] 8
         expr 8
          term 9
           factor 10
            call 11
             ID i -> [LT <] 12
            fail call
            varref 11
            ID i -> [LT <] 11
            success varref
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            LT < -> [INTEGER_CONST 360] 11
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 360 -> [SEMI ;] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
         remove key/value SEMI ; (8)
         remove multiple key (8)
         success expr
         SEMI ; -> [ID i] 8
         increment 8
          assign 9
           varleft 10
           ID i -> [ASSIGN =] 10
           success varleft
           ASSIGN = -> [ID i] 10
           expr 10
            term 11
             factor 12
              call 13
               ID i -> [PLUS +] 14
              fail call
              varref 13
              ID i -> [PLUS +] 13
              success varref
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
              PLUS + -> [INTEGER_CONST 30] 13
             term 12
              factor 13
               call 14
               fail call
               varref 14
               fail varref
               INTEGER_CONST 30 -> [RPAREN )] 14
              success factor
             remove multiple key (12)
             remove multiple empty (12)
             success term
           remove key/value ASSIGN = (10)
           remove multiple key (10)
           success expr
          success assign
         remove key/value SEMI ; (8)
         success increment
         RPAREN ) -> [LCURL {] 8
         block 8
          LCURL { -> [ID setPixelColor] 9
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             ID setPixelColor -> [LPAREN (] 12
             success varleft
            fail assign
            function 11
            fail function
            call 11
             ID setPixelColor -> [LPAREN (] 12
             LPAREN ( -> [ID circle2D] 12
             actuals 12
              expr 13
               term 14
                factor 15
                 call 16
                  ID circle2D -> [LPAREN (] 17
                  LPAREN ( -> [ID i] 17
                  actuals 17
                   expr 18
                    term 19
                     factor 20
                      call 21
                       ID i -> [RPAREN )] 22
                      fail call
                      varref 21
                      ID i -> [RPAREN )] 21
                      success varref
                     success factor
                    remove multiple key (19)
                    remove multiple empty (19)
                    success term
                   remove multiple key (18)
                   remove multiple empty (18)
                   success expr
                  remove key/value LPAREN ( (17)
                  remove multiple key (17)
                  remove multiple empty (17)
                  success actuals
                  RPAREN ) -> [COMMA ,] 17
                 success call
                success factor
               remove multiple key (14)
               remove multiple empty (14)
               success term
              remove multiple key (13)
              remove multiple empty (13)
              success expr
               COMMA , -> [INTEGER_CONST 225] 14
               expr 14
                term 15
                 factor 16
                  call 17
                  fail call
                  varref 17
                  fail varref
                  INTEGER_CONST 225 -> [RPAREN )] 17
                 success factor
                remove multiple key (15)
                remove multiple empty (15)
                success term
               remove multiple key (14)
               remove multiple empty (14)
               success expr
             remove key/value LPAREN ( (12)
             remove multiple key (12)
             success actuals
             RPAREN ) -> [RCURL }] 12
            success call
           success statement
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             fail varleft
            fail assign
            function 11
            fail function
            call 11
            fail call
            for 11
            fail for
            if 11
            fail if
            block 11
            fail block
           fail statement
          RCURL } -> [ID setPixelColor] 9
         remove key/value RPAREN ) (8)
         remove multiple key (8)
         success block
        success for
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setPixelColor -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setPixelColor -> [LPAREN (] 8
         LPAREN ( -> [ID circle2D] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
              ID circle2D -> [LPAREN (] 13
              LPAREN ( -> [ID second] 13
              actuals 13
               expr 14
                term 15
                 factor 16
                  call 17
                   ID second -> [MUL *] 18
                  fail call
                  varref 17
                  ID second -> [MUL *] 17
                  success varref
                 success factor
                   MUL * -> [INTEGER_CONST 6] 18
                  factor 17
                   call 18
                   fail call
                   varref 18
                   fail varref
                   INTEGER_CONST 6 -> [RPAREN )] 18
                  success factor
                remove multiple key (15)
                success term
               remove multiple key (14)
               remove multiple empty (14)
               success expr
              remove key/value LPAREN ( (13)
              remove multiple key (13)
              remove multiple empty (13)
              success actuals
              RPAREN ) -> [COMMA ,] 13
             success call
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
          remove multiple key (9)
          remove multiple empty (9)
          success expr
           COMMA , -> [INTEGER_CONST 25] 10
           expr 10
            term 11
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 25 -> [RPAREN )] 13
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success actuals
         RPAREN ) -> [ID setPixelColor] 8
        success call
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setPixelColor -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setPixelColor -> [LPAREN (] 8
         LPAREN ( -> [ID circle2D] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
              ID circle2D -> [LPAREN (] 13
              LPAREN ( -> [ID minute] 13
              actuals 13
               expr 14
                term 15
                 factor 16
                  call 17
                   ID minute -> [MUL *] 18
                  fail call
                  varref 17
                  ID minute -> [MUL *] 17
                  success varref
                 success factor
                   MUL * -> [INTEGER_CONST 6] 18
                  factor 17
                   call 18
                   fail call
                   varref 18
                   fail varref
                   INTEGER_CONST 6 -> [RPAREN )] 18
                  success factor
                remove multiple key (15)
                success term
               remove multiple key (14)
               remove multiple empty (14)
               success expr
              remove key/value LPAREN ( (13)
              remove multiple key (13)
              remove multiple empty (13)
              success actuals
              RPAREN ) -> [COMMA ,] 13
             success call
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
          remove multiple key (9)
          remove multiple empty (9)
          success expr
           COMMA , -> [INTEGER_CONST 92] 10
           expr 10
            term 11
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 92 -> [RPAREN )] 13
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success actuals
         RPAREN ) -> [ID setPixelColor] 8
        success call
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setPixelColor -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setPixelColor -> [LPAREN (] 8
         LPAREN ( -> [ID circle2D] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
              ID circle2D -> [LPAREN (] 13
              LPAREN ( -> [ID hour] 13
              actuals 13
               expr 14
                term 15
                 factor 16
                  call 17
                   ID hour -> [MUL *] 18
                  fail call
                  varref 17
                  ID hour -> [MUL *] 17
                  success varref
                 success factor
                   MUL * -> [INTEGER_CONST 30] 18
                  factor 17
                   call 18
                   fail call
                   varref 18
                   fail varref
                   INTEGER_CONST 30 -> [PLUS +] 18
                  success factor
                remove multiple key (15)
                success term
                  PLUS + -> [ID minute] 17
                 term 16
                  factor 17
                   call 18
                    ID minute -> [DIV /] 19
                   fail call
                   varref 18
                   ID minute -> [DIV /] 18
                   success varref
                  success factor
                    DIV / -> [INTEGER_CONST 2] 19
                   factor 18
                    call 19
                    fail call
                    varref 19
                    fail varref
                    INTEGER_CONST 2 -> [RPAREN )] 19
                   success factor
                 remove multiple key (16)
                 success term
               remove multiple key (14)
               success expr
              remove key/value LPAREN ( (13)
              remove multiple key (13)
              remove multiple empty (13)
              success actuals
              RPAREN ) -> [COMMA ,] 13
             success call
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
          remove multiple key (9)
          remove multiple empty (9)
          success expr
           COMMA , -> [INTEGER_CONST 160] 10
           expr 10
            term 11
             factor 12
              call 13
              fail call
              varref 13
              fail varref
              INTEGER_CONST 160 -> [RPAREN )] 13
             success factor
            remove multiple key (11)
            remove multiple empty (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success actuals
         RPAREN ) -> [RCURL }] 8
        success call
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [RCURL }] 5
     remove key/value RPAREN ) (4)
     remove multiple key (4)
     success block
    success function
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
    fail function
    call 3
    fail call
    for 3
    fail for
    if 3
    fail if
    block 3
    fail block
   fail statement
  RCURL } 1
 remove key/value PROGRAM PROGRAM (0)
 remove multiple key (0)
 success block
Symbol program Parsed until (21,1) 476 of 476
par mem 15109 of 47600 47600 1 0 27
prog size 476 factor 31
par mem 7255 of 47600 47600 1 0 27
Destruct Lexer

Analyzer
 Program Clock2D 1 0
     Function Clock2D.renderFrame
         Ext Function found setRange (8)
               Ext Variable found ledCount (14)
          Assign renderFrame.i of notype
          Assign i = (9)
             VarRef found renderFrame.i (12)
           Assign i = (10)
               VarRef found renderFrame.i (14)
              Ext Function found setPixelColor (13)
                  Ext Function found circle2D (17)
                      VarRef found renderFrame.i (21)
         Ext Function found setPixelColor (8)
             Ext Function found circle2D (12)
                 Ext Variable found second (16)
         Ext Function found setPixelColor (8)
             Ext Function found circle2D (12)
                 Ext Variable found minute (16)
         Ext Function found setPixelColor (8)
             Ext Function found circle2D (12)
                 Ext Variable found hour (16)
                   Ext Variable found minute (18)
     0 Assign renderFrame.i notype 2
 0 Function Clock2D.renderFrame  1

interpret Clock2D 1 1
 program name ID
 Program Clock2D Clock2D
     Save block of renderFrame
         Call renderFrame (1)
                 INTEGER_CONST 0 (Push 1)
                   VarRef ext.ledCount = 3.000000 (push 2)
                   INTEGER_CONST 0 (Push 3)
             Call setRange(0.000000, 3.000000, 0.000000) = 3.000000
             For (1)
             from
                  INTEGER_CONST 0 (Push 2)
              renderFrame.i := 0.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 0.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              0.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 0.000000 (push 2)
circle2D(0.000000)
                     Call circle2D(0.000000) = 0.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(0.000000, 225.000000)
                 Call setPixelColor(0.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 0.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               0.000000 + 30.000000 = 30.000000 (push 2)
              renderFrame.i := 30.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 30.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              30.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 30.000000 (push 2)
circle2D(30.000000)
                     Call circle2D(30.000000) = 15.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(15.000000, 225.000000)
                 Call setPixelColor(15.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 30.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               30.000000 + 30.000000 = 60.000000 (push 2)
              renderFrame.i := 60.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 60.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              60.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 60.000000 (push 2)
circle2D(60.000000)
                     Call circle2D(60.000000) = 30.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(30.000000, 225.000000)
                 Call setPixelColor(30.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 60.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               60.000000 + 30.000000 = 90.000000 (push 2)
              renderFrame.i := 90.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 90.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              90.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 90.000000 (push 2)
circle2D(90.000000)
                     Call circle2D(90.000000) = 45.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(45.000000, 225.000000)
                 Call setPixelColor(45.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 90.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               90.000000 + 30.000000 = 120.000000 (push 2)
              renderFrame.i := 120.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 120.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              120.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 120.000000 (push 2)
circle2D(120.000000)
                     Call circle2D(120.000000) = 60.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(60.000000, 225.000000)
                 Call setPixelColor(60.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 120.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               120.000000 + 30.000000 = 150.000000 (push 2)
              renderFrame.i := 150.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 150.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              150.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 150.000000 (push 2)
circle2D(150.000000)
                     Call circle2D(150.000000) = 75.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(75.000000, 225.000000)
                 Call setPixelColor(75.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 150.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               150.000000 + 30.000000 = 180.000000 (push 2)
              renderFrame.i := 180.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 180.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              180.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 180.000000 (push 2)
circle2D(180.000000)
                     Call circle2D(180.000000) = 90.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(90.000000, 225.000000)
                 Call setPixelColor(90.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 180.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               180.000000 + 30.000000 = 210.000000 (push 2)
              renderFrame.i := 210.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 210.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              210.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 210.000000 (push 2)
circle2D(210.000000)
                     Call circle2D(210.000000) = 105.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(105.000000, 225.000000)
                 Call setPixelColor(105.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 210.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               210.000000 + 30.000000 = 240.000000 (push 2)
              renderFrame.i := 240.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 240.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              240.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 240.000000 (push 2)
circle2D(240.000000)
                     Call circle2D(240.000000) = 120.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(120.000000, 225.000000)
                 Call setPixelColor(120.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 240.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               240.000000 + 30.000000 = 270.000000 (push 2)
              renderFrame.i := 270.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 270.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              270.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 270.000000 (push 2)
circle2D(270.000000)
                     Call circle2D(270.000000) = 135.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(135.000000, 225.000000)
                 Call setPixelColor(135.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 270.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               270.000000 + 30.000000 = 300.000000 (push 2)
              renderFrame.i := 300.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 300.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              300.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 300.000000 (push 2)
circle2D(300.000000)
                     Call circle2D(300.000000) = 150.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(150.000000, 225.000000)
                 Call setPixelColor(150.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 300.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               300.000000 + 30.000000 = 330.000000 (push 2)
              renderFrame.i := 330.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 330.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              330.000000 < 360.000000 = 1.000000 (push 2)
             conditionResult (pop 1)
             1 => run block
                         VarRef renderFrame.i = 330.000000 (push 2)
circle2D(330.000000)
                     Call circle2D(330.000000) = 165.000000
                       INTEGER_CONST 225 (Push 3)
setPixelColor(165.000000, 225.000000)
                 Call setPixelColor(165.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 330.000000 (push 2)
                  PLUS + (Push 3)
                    INTEGER_CONST 30 (Push 4)
               330.000000 + 30.000000 = 360.000000 (push 2)
              renderFrame.i := 360.000000 (pop 1)
             iteration
             check to condition
                 VarRef renderFrame.i = 360.000000 (push 2)
                 LT < (Push 3)
                   INTEGER_CONST 360 (Push 4)
              360.000000 < 360.000000 = 0.000000 (push 2)
             conditionResult (pop 1)
             0 => end of For
                     VarRef ext.second = 60.000000 (push 2)
                      MUL * (Push 3)
                       INTEGER_CONST 6 (Push 4)
                   60.000000 * 6.000000 = 360.000000 (push 2)
circle2D(360.000000)
                 Call circle2D(360.000000) = 180.000000
                   INTEGER_CONST 25 (Push 3)
setPixelColor(180.000000, 25.000000)
             Call setPixelColor(180.000000, 25.000000)
                     VarRef ext.minute = 60.000000 (push 2)
                      MUL * (Push 3)
                       INTEGER_CONST 6 (Push 4)
                   60.000000 * 6.000000 = 360.000000 (push 2)
circle2D(360.000000)
                 Call circle2D(360.000000) = 180.000000
                   INTEGER_CONST 92 (Push 3)
setPixelColor(180.000000, 92.000000)
             Call setPixelColor(180.000000, 92.000000)
                     VarRef ext.hour = 24.000000 (push 2)
                      MUL * (Push 3)
                       INTEGER_CONST 30 (Push 4)
                   24.000000 * 30.000000 = 720.000000 (push 2)
                     PLUS + (Push 3)
                       VarRef ext.minute = 60.000000 (push 4)
                        DIV / (Push 5)
                         INTEGER_CONST 2 (Push 6)
                     60.000000 / 2.000000 = 30.000000 (push 4)
                  720.000000 + 30.000000 = 750.000000 (push 2)
circle2D(750.000000)
                 Call circle2D(750.000000) = 375.000000
                   INTEGER_CONST 160 (Push 3)
setPixelColor(375.000000, 160.000000)
             Call setPixelColor(375.000000, 160.000000)
Destruct activation record renderFrame
         Call renderFrame (1)
                 INTEGER_CONST 0 (Push 2)
                   VarRef ext.ledCount = 3.000000 (push 3)
                   INTEGER_CONST 0 (Push 4)
             Call setRange(0.000000, 3.000000, 0.000000) = 3.000000
             For (2)
             from
                  INTEGER_CONST 0 (Push 3)
              renderFrame.i := 0.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 0.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              0.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 0.000000 (push 3)
circle2D(0.000000)
                     Call circle2D(0.000000) = 0.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(0.000000, 225.000000)
                 Call setPixelColor(0.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 0.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               0.000000 + 30.000000 = 30.000000 (push 3)
              renderFrame.i := 30.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 30.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              30.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 30.000000 (push 3)
circle2D(30.000000)
                     Call circle2D(30.000000) = 15.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(15.000000, 225.000000)
                 Call setPixelColor(15.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 30.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               30.000000 + 30.000000 = 60.000000 (push 3)
              renderFrame.i := 60.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 60.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              60.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 60.000000 (push 3)
circle2D(60.000000)
                     Call circle2D(60.000000) = 30.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(30.000000, 225.000000)
                 Call setPixelColor(30.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 60.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               60.000000 + 30.000000 = 90.000000 (push 3)
              renderFrame.i := 90.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 90.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              90.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 90.000000 (push 3)
circle2D(90.000000)
                     Call circle2D(90.000000) = 45.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(45.000000, 225.000000)
                 Call setPixelColor(45.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 90.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               90.000000 + 30.000000 = 120.000000 (push 3)
              renderFrame.i := 120.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 120.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              120.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 120.000000 (push 3)
circle2D(120.000000)
                     Call circle2D(120.000000) = 60.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(60.000000, 225.000000)
                 Call setPixelColor(60.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 120.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               120.000000 + 30.000000 = 150.000000 (push 3)
              renderFrame.i := 150.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 150.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              150.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 150.000000 (push 3)
circle2D(150.000000)
                     Call circle2D(150.000000) = 75.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(75.000000, 225.000000)
                 Call setPixelColor(75.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 150.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               150.000000 + 30.000000 = 180.000000 (push 3)
              renderFrame.i := 180.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 180.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              180.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 180.000000 (push 3)
circle2D(180.000000)
                     Call circle2D(180.000000) = 90.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(90.000000, 225.000000)
                 Call setPixelColor(90.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 180.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               180.000000 + 30.000000 = 210.000000 (push 3)
              renderFrame.i := 210.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 210.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              210.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 210.000000 (push 3)
circle2D(210.000000)
                     Call circle2D(210.000000) = 105.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(105.000000, 225.000000)
                 Call setPixelColor(105.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 210.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               210.000000 + 30.000000 = 240.000000 (push 3)
              renderFrame.i := 240.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 240.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              240.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 240.000000 (push 3)
circle2D(240.000000)
                     Call circle2D(240.000000) = 120.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(120.000000, 225.000000)
                 Call setPixelColor(120.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 240.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               240.000000 + 30.000000 = 270.000000 (push 3)
              renderFrame.i := 270.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 270.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              270.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 270.000000 (push 3)
circle2D(270.000000)
                     Call circle2D(270.000000) = 135.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(135.000000, 225.000000)
                 Call setPixelColor(135.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 270.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               270.000000 + 30.000000 = 300.000000 (push 3)
              renderFrame.i := 300.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 300.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              300.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 300.000000 (push 3)
circle2D(300.000000)
                     Call circle2D(300.000000) = 150.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(150.000000, 225.000000)
                 Call setPixelColor(150.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 300.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               300.000000 + 30.000000 = 330.000000 (push 3)
              renderFrame.i := 330.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 330.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              330.000000 < 360.000000 = 1.000000 (push 3)
             conditionResult (pop 2)
             1 => run block
                         VarRef renderFrame.i = 330.000000 (push 3)
circle2D(330.000000)
                     Call circle2D(330.000000) = 165.000000
                       INTEGER_CONST 225 (Push 4)
setPixelColor(165.000000, 225.000000)
                 Call setPixelColor(165.000000, 225.000000)
             assign next value
                  VarRef renderFrame.i = 330.000000 (push 3)
                  PLUS + (Push 4)
                    INTEGER_CONST 30 (Push 5)
               330.000000 + 30.000000 = 360.000000 (push 3)
              renderFrame.i := 360.000000 (pop 2)
             iteration
             check to condition
                 VarRef renderFrame.i = 360.000000 (push 3)
                 LT < (Push 4)
                   INTEGER_CONST 360 (Push 5)
              360.000000 < 360.000000 = 0.000000 (push 3)
             conditionResult (pop 2)
             0 => end of For
                     VarRef ext.second = 60.000000 (push 3)
                      MUL * (Push 4)
                       INTEGER_CONST 6 (Push 5)
                   60.000000 * 6.000000 = 360.000000 (push 3)
circle2D(360.000000)
                 Call circle2D(360.000000) = 180.000000
                   INTEGER_CONST 25 (Push 4)
setPixelColor(180.000000, 25.000000)
             Call setPixelColor(180.000000, 25.000000)
                     VarRef ext.minute = 60.000000 (push 3)
                      MUL * (Push 4)
                       INTEGER_CONST 6 (Push 5)
                   60.000000 * 6.000000 = 360.000000 (push 3)
circle2D(360.000000)
                 Call circle2D(360.000000) = 180.000000
                   INTEGER_CONST 92 (Push 4)
setPixelColor(180.000000, 92.000000)
             Call setPixelColor(180.000000, 92.000000)
                     VarRef ext.hour = 24.000000 (push 3)
                      MUL * (Push 4)
                       INTEGER_CONST 30 (Push 5)
                   24.000000 * 30.000000 = 720.000000 (push 3)
                     PLUS + (Push 4)
                       VarRef ext.minute = 60.000000 (push 5)
                        DIV / (Push 6)
                         INTEGER_CONST 2 (Push 7)
                     60.000000 / 2.000000 = 30.000000 (push 5)
                  720.000000 + 30.000000 = 750.000000 (push 3)
circle2D(750.000000)
                 Call circle2D(750.000000) = 375.000000
                   INTEGER_CONST 160 (Push 4)
setPixelColor(375.000000, 160.000000)
             Call setPixelColor(375.000000, 160.000000)
Destruct activation record renderFrame
Destruct callstack
Destruct valueStack
def mem 9435 of 12192 12192 24 0 6
par mem 7703 of 47600 47600 1 0 27
