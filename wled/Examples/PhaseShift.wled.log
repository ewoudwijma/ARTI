 PROGRAM PROGRAM -> [ID PhaseShift] 0
 ID PhaseShift -> [LCURL {] 0
 block 0
  LCURL { -> [ID pixelCounter] 1
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     ID pixelCounter -> [ASSIGN =] 4
     success varleft
     ASSIGN = -> [INTEGER_CONST 3] 4
     expr 4
      term 5
       factor 6
        call 7
        fail call
        varref 7
        fail varref
        INTEGER_CONST 3 -> [ID countAdd] 7
       success factor
      remove multiple key (5)
      remove multiple empty (5)
      success term
     remove key/value ASSIGN = (4)
     remove multiple key (4)
     remove multiple empty (4)
     success expr
    success assign
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     ID countAdd -> [ASSIGN =] 4
     success varleft
     ASSIGN = -> [INTEGER_CONST 1] 4
     expr 4
      term 5
       factor 6
        call 7
        fail call
        varref 7
        fail varref
        INTEGER_CONST 1 -> [FUNCTION FUNCTION] 7
       success factor
      remove multiple key (5)
      remove multiple empty (5)
      success term
     remove key/value ASSIGN = (4)
     remove multiple key (4)
     remove multiple empty (4)
     success expr
    success assign
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderFrame] 4
     ID renderFrame -> [LPAREN (] 4
      LPAREN ( -> [RPAREN )] 5
      formals 5
       formal 6
       fail formal
      remove key/value FUNCTION FUNCTION (5)
      remove key/value LPAREN ( (5)
      remove empty values for key formals (5)
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [ID pixelCounter] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID pixelCounter -> [ASSIGN =] 8
         success varleft
         ASSIGN = -> [ID pixelCounter] 8
         expr 8
          term 9
           factor 10
            call 11
             ID pixelCounter -> [PLUS +] 12
            fail call
            varref 11
            ID pixelCounter -> [PLUS +] 11
            success varref
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            PLUS + -> [ID countAdd] 11
           term 10
            factor 11
             call 12
              ID countAdd -> [IF IF] 13
             fail call
             varref 12
             ID countAdd -> [IF IF] 12
             success varref
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
         remove key/value ASSIGN = (8)
         remove multiple key (8)
         success expr
        success assign
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
         IF IF -> [LPAREN (] 8
         LPAREN ( -> [ID pixelCounter] 8
         expr 8
          term 9
           factor 10
            call 11
             ID pixelCounter -> [GT >] 12
            fail call
            varref 11
            ID pixelCounter -> [GT >] 11
            success varref
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            GT > -> [INTEGER_CONST 15] 11
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 15 -> [RPAREN )] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
         remove key/value IF IF (8)
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success expr
         RPAREN ) -> [LCURL {] 8
         block 8
          LCURL { -> [ID countAdd] 9
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             ID countAdd -> [ASSIGN =] 12
             success varleft
             ASSIGN = -> [INTEGER_CONST 0] 12
             expr 12
              term 13
               factor 14
                call 15
                fail call
                varref 15
                fail varref
                INTEGER_CONST 0 -> [MINUS -] 15
               success factor
              remove multiple key (13)
              remove multiple empty (13)
              success term
                MINUS - -> [INTEGER_CONST 1] 15
               term 14
                factor 15
                 call 16
                 fail call
                 varref 16
                 fail varref
                 INTEGER_CONST 1 -> [RCURL }] 16
                success factor
               remove multiple key (14)
               remove multiple empty (14)
               success term
             remove key/value ASSIGN = (12)
             remove multiple key (12)
             success expr
            success assign
           success statement
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             fail varleft
            fail assign
            function 11
            fail function
            call 11
            fail call
            for 11
            fail for
            if 11
            fail if
            block 11
            fail block
           fail statement
          RCURL } -> [IF IF] 9
         remove key/value RPAREN ) (8)
         remove multiple key (8)
         success block
        success if
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
         IF IF -> [LPAREN (] 8
         LPAREN ( -> [ID pixelCounter] 8
         expr 8
          term 9
           factor 10
            call 11
             ID pixelCounter -> [LT <] 12
            fail call
            varref 11
            ID pixelCounter -> [LT <] 11
            success varref
           success factor
          remove multiple key (9)
          remove multiple empty (9)
          success term
            LT < -> [INTEGER_CONST 3] 11
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 3 -> [RPAREN )] 12
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
         remove key/value IF IF (8)
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success expr
         RPAREN ) -> [LCURL {] 8
         block 8
          LCURL { -> [ID countAdd] 9
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             ID countAdd -> [ASSIGN =] 12
             success varleft
             ASSIGN = -> [INTEGER_CONST 1] 12
             expr 12
              term 13
               factor 14
                call 15
                fail call
                varref 15
                fail varref
                INTEGER_CONST 1 -> [RCURL }] 15
               success factor
              remove multiple key (13)
              remove multiple empty (13)
              success term
             remove key/value ASSIGN = (12)
             remove multiple key (12)
             remove multiple empty (12)
             success expr
            success assign
           success statement
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             fail varleft
            fail assign
            function 11
            fail function
            call 11
            fail call
            for 11
            fail for
            if 11
            fail if
            block 11
            fail block
           fail statement
          RCURL } -> [RCURL }] 9
         remove key/value RPAREN ) (8)
         remove multiple key (8)
         success block
        success if
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [FUNCTION FUNCTION] 5
     remove key/value RPAREN ) (4)
     remove multiple key (4)
     success block
    success function
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderLed] 4
     ID renderLed -> [LPAREN (] 4
      LPAREN ( -> [ID i] 5
      formals 5
       formal 6
       ID i -> [RPAREN )] 6
       success formal
      remove key/value FUNCTION FUNCTION (5)
      remove key/value LPAREN ( (5)
      remove multiple key (5)
      remove multiple empty (5)
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [ID setPixelColor] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         ID setPixelColor -> [LPAREN (] 8
         success varleft
        fail assign
        function 7
        fail function
        call 7
         ID setPixelColor -> [LPAREN (] 8
         LPAREN ( -> [ID i] 8
         actuals 8
          expr 9
           term 10
            factor 11
             call 12
              ID i -> [COMMA ,] 13
             fail call
             varref 12
             ID i -> [COMMA ,] 12
             success varref
            success factor
           remove multiple key (10)
           remove multiple empty (10)
           success term
          remove multiple key (9)
          remove multiple empty (9)
          success expr
           COMMA , -> [ID i] 10
           expr 10
            term 11
             factor 12
              call 13
               ID i -> [MUL *] 14
              fail call
              varref 13
              ID i -> [MUL *] 13
              success varref
             success factor
               MUL * -> [ID pixelCounter] 14
              factor 13
               call 14
                ID pixelCounter -> [RPAREN )] 15
               fail call
               varref 14
               ID pixelCounter -> [RPAREN )] 14
               success varref
              success factor
            remove multiple key (11)
            success term
           remove multiple key (10)
           remove multiple empty (10)
           success expr
         remove key/value LPAREN ( (8)
         remove multiple key (8)
         success actuals
         RPAREN ) -> [RCURL }] 8
        success call
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [RCURL }] 5
     remove key/value RPAREN ) (4)
     remove multiple key (4)
     success block
    success function
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
    fail function
    call 3
    fail call
    for 3
    fail for
    if 3
    fail if
    block 3
    fail block
   fail statement
  RCURL } 1
 remove key/value PROGRAM PROGRAM (0)
 remove multiple key (0)
 success block
Symbol program Parsed until (29,0) 377 of 377
par mem 10535 of 37704 37704 1 0 22
prog size 377 factor 27
par mem 5153 of 37704 37704 1 0 22
Destruct Lexer

Analyzer
 Program PhaseShift 1 0
     Assign PhaseShift.pixelCounter of notype
     Assign pixelCounter = (4)
     Assign PhaseShift.countAdd of notype
     Assign countAdd = (4)
     Function PhaseShift.renderFrame
         Assign pixelCounter = (8)
             VarRef found PhaseShift.pixelCounter (12)
               VarRef found PhaseShift.countAdd (14)
             VarRef found PhaseShift.pixelCounter (12)
              Assign countAdd = (13)
             VarRef found PhaseShift.pixelCounter (12)
              Assign countAdd = (13)
     Function PhaseShift.renderLed
      Formal renderLed.i of notype
         Ext Function found setPixelColor (8)
             VarRef found renderLed.i (12)
               VarRef found renderLed.i (14)
                 VarRef found PhaseShift.pixelCounter (16)
     0 Formal renderLed.i notype 2
 0 Assign PhaseShift.pixelCounter notype 1
 1 Assign PhaseShift.countAdd notype 1
 2 Function PhaseShift.renderFrame  1
 3 Function PhaseShift.renderLed  1

interpret PhaseShift 1 4
 program name ID
 Program PhaseShift PhaseShift
         INTEGER_CONST 3 (Push 1)
     PhaseShift.pixelCounter := 3.000000 (pop 0)
         INTEGER_CONST 1 (Push 1)
     PhaseShift.countAdd := 1.000000 (pop 0)
     Save block of renderFrame
     Save block of renderLed
         Call renderFrame (1)
                 VarRef PhaseShift.pixelCounter = 3.000000 (push 1)
                 PLUS + (Push 2)
                   VarRef PhaseShift.countAdd = 1.000000 (push 3)
              3.000000 + 1.000000 = 4.000000 (push 1)
             PhaseShift.pixelCounter := 4.000000 (pop 0)
             If (0)
             if condition
                 VarRef PhaseShift.pixelCounter = 4.000000 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 15 (Push 3)
              4.000000 > 15.000000 = 0.000000 (push 1)
             (pop 0)
             If (0)
             if condition
                 VarRef PhaseShift.pixelCounter = 4.000000 (push 1)
                 LT < (Push 2)
                   INTEGER_CONST 3 (Push 3)
              4.000000 < 3.000000 = 0.000000 (push 1)
             (pop 0)
Destruct activation record renderFrame
                 VarRef renderLed.i = 0.000000 (push 1)
                   VarRef renderLed.i = 0.000000 (push 2)
                    MUL * (Push 3)
                     VarRef PhaseShift.pixelCounter = 4.000000 (push 4)
                 0.000000 * 4.000000 = 0.000000 (push 2)
setPixelColor(0.000000, 0.000000)
             Call setPixelColor(0.000000, 0.000000)
                 VarRef renderLed.i = 1.000000 (push 1)
                   VarRef renderLed.i = 1.000000 (push 2)
                    MUL * (Push 3)
                     VarRef PhaseShift.pixelCounter = 4.000000 (push 4)
                 1.000000 * 4.000000 = 4.000000 (push 2)
setPixelColor(1.000000, 4.000000)
             Call setPixelColor(1.000000, 4.000000)
                 VarRef renderLed.i = 2.000000 (push 1)
                   VarRef renderLed.i = 2.000000 (push 2)
                    MUL * (Push 3)
                     VarRef PhaseShift.pixelCounter = 4.000000 (push 4)
                 2.000000 * 4.000000 = 8.000000 (push 2)
setPixelColor(2.000000, 8.000000)
             Call setPixelColor(2.000000, 8.000000)
Destruct activation record renderLed
         Call renderFrame (1)
                 VarRef PhaseShift.pixelCounter = 4.000000 (push 1)
                 PLUS + (Push 2)
                   VarRef PhaseShift.countAdd = 1.000000 (push 3)
              4.000000 + 1.000000 = 5.000000 (push 1)
             PhaseShift.pixelCounter := 5.000000 (pop 0)
             If (0)
             if condition
                 VarRef PhaseShift.pixelCounter = 5.000000 (push 1)
                 GT > (Push 2)
                   INTEGER_CONST 15 (Push 3)
              5.000000 > 15.000000 = 0.000000 (push 1)
             (pop 0)
             If (0)
             if condition
                 VarRef PhaseShift.pixelCounter = 5.000000 (push 1)
                 LT < (Push 2)
                   INTEGER_CONST 3 (Push 3)
              5.000000 < 3.000000 = 0.000000 (push 1)
             (pop 0)
Destruct activation record renderFrame
                 VarRef renderLed.i = 0.000000 (push 1)
                   VarRef renderLed.i = 0.000000 (push 2)
                    MUL * (Push 3)
                     VarRef PhaseShift.pixelCounter = 5.000000 (push 4)
                 0.000000 * 5.000000 = 0.000000 (push 2)
setPixelColor(0.000000, 0.000000)
             Call setPixelColor(0.000000, 0.000000)
                 VarRef renderLed.i = 1.000000 (push 1)
                   VarRef renderLed.i = 1.000000 (push 2)
                    MUL * (Push 3)
                     VarRef PhaseShift.pixelCounter = 5.000000 (push 4)
                 1.000000 * 5.000000 = 5.000000 (push 2)
setPixelColor(1.000000, 5.000000)
             Call setPixelColor(1.000000, 5.000000)
                 VarRef renderLed.i = 2.000000 (push 1)
                   VarRef renderLed.i = 2.000000 (push 2)
                    MUL * (Push 3)
                     VarRef PhaseShift.pixelCounter = 5.000000 (push 4)
                 2.000000 * 5.000000 = 10.000000 (push 2)
setPixelColor(2.000000, 10.000000)
             Call setPixelColor(2.000000, 10.000000)
Destruct activation record renderLed
Destruct callstack
Destruct valueStack
def mem 9435 of 12192 12192 24 0 6
par mem 5185 of 37704 37704 1 0 22
