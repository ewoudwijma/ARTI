Parser PROGRAM PROGRAM
 PROGRAM PROGRAM -> [ID ColorRandom] 0
 ID ColorRandom -> [LCURL {] 0
 block 0
  LCURL { -> [FUNCTION FUNCTION] 1
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
     FUNCTION FUNCTION -> [ID renderFrame] 4
     ID renderFrame -> [LPAREN (] 4
      LPAREN ( -> [RPAREN )] 5
      formals 5
       formal 6
       fail formal
      success formals
      RPAREN ) -> [LCURL {] 5
     block 4
      LCURL { -> [FOR FOR] 5
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
         FOR FOR -> [LPAREN (] 8
         LPAREN ( -> [ID i] 8
         assign 8
          varleft 9
          ID i -> [ASSIGN =] 9
          success varleft
          ASSIGN = -> [INTEGER_CONST 0] 9
          expr 9
           term 10
            factor 11
             call 12
             fail call
             varref 12
             fail varref
             INTEGER_CONST 0 -> [SEMI ;] 12
            symbol to shrink factor
            success factor
           remove multiple key
           remove multiple empty
           success term
          remove multiple key
          remove multiple empty
          success expr
         success assign
         SEMI ; -> [ID i] 8
         expr 8
          term 9
           factor 10
            call 11
             ID i -> [LT <] 12
            fail call
            varref 11
            ID i -> [LT <] 11
            success varref
           symbol to shrink factor
           success factor
          remove multiple key
          remove multiple empty
          success term
            LT < -> [ID ledCount] 11
           term 10
            factor 11
             call 12
              ID ledCount -> [SEMI ;] 13
             fail call
             varref 12
             ID ledCount -> [SEMI ;] 12
             success varref
            symbol to shrink factor
            success factor
           remove multiple key
           remove multiple empty
           success term
         remove multiple key
         success expr
         SEMI ; -> [ID i] 8
         increment 8
          assign 9
           varleft 10
           ID i -> [ASSIGN =] 10
           success varleft
           ASSIGN = -> [ID i] 10
           expr 10
            term 11
             factor 12
              call 13
               ID i -> [PLUS +] 14
              fail call
              varref 13
              ID i -> [PLUS +] 13
              success varref
             symbol to shrink factor
             success factor
            remove multiple key
            remove multiple empty
            success term
              PLUS + -> [INTEGER_CONST 1] 13
             term 12
              factor 13
               call 14
               fail call
               varref 14
               fail varref
               INTEGER_CONST 1 -> [RPAREN )] 14
              symbol to shrink factor
              success factor
             remove multiple key
             remove multiple empty
             success term
           remove multiple key
           success expr
          success assign
         success increment
         RPAREN ) -> [LCURL {] 8
         block 8
          LCURL { -> [ID color] 9
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             ID color -> [ASSIGN =] 12
             success varleft
             ASSIGN = -> [ID random] 12
             expr 12
              term 13
               factor 14
                call 15
                 ID random -> [LPAREN (] 16
                 LPAREN ( -> [RPAREN )] 16
                 actuals 16
                  expr 17
                   term 18
                    factor 19
                     call 20
                     fail call
                     varref 20
                     fail varref
                    fail factor
                   fail term
                  fail expr
                 success actuals
                 RPAREN ) -> [ID setPixelColor] 16
                success call
               symbol to shrink factor
               success factor
              remove multiple key
              remove multiple empty
              success term
             remove multiple key
             remove multiple empty
             success expr
            success assign
           symbol to shrink statement
           success statement
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             ID setPixelColor -> [LPAREN (] 12
             success varleft
            fail assign
            function 11
            fail function
            call 11
             ID setPixelColor -> [LPAREN (] 12
             LPAREN ( -> [ID i] 12
             actuals 12
              expr 13
               term 14
                factor 15
                 call 16
                  ID i -> [COMMA ,] 17
                 fail call
                 varref 16
                 ID i -> [COMMA ,] 16
                 success varref
                symbol to shrink factor
                success factor
               remove multiple key
               remove multiple empty
               success term
              remove multiple key
              remove multiple empty
              success expr
               COMMA , -> [ID color] 14
               expr 14
                term 15
                 factor 16
                  call 17
                   ID color -> [RPAREN )] 18
                  fail call
                  varref 17
                  ID color -> [RPAREN )] 17
                  success varref
                 symbol to shrink factor
                 success factor
                remove multiple key
                remove multiple empty
                success term
               remove multiple key
               remove multiple empty
               success expr
             remove multiple key
             success actuals
             RPAREN ) -> [RCURL }] 12
            success call
           symbol to shrink statement
           success statement
           statement 10
            variable 11
            fail variable
            assign 11
             varleft 12
             fail varleft
            fail assign
            function 11
            fail function
            call 11
            fail call
            for 11
            fail for
            if 11
            fail if
            block 11
            fail block
           fail statement
          RCURL } -> [RCURL }] 9
         remove multiple key
         success block
        success for
       symbol to shrink statement
       success statement
       statement 6
        variable 7
        fail variable
        assign 7
         varleft 8
         fail varleft
        fail assign
        function 7
        fail function
        call 7
        fail call
        for 7
        fail for
        if 7
        fail if
        block 7
        fail block
       fail statement
      RCURL } -> [RCURL }] 5
     remove multiple key
     success block
    success function
   symbol to shrink statement
   success statement
   statement 2
    variable 3
    fail variable
    assign 3
     varleft 4
     fail varleft
    fail assign
    function 3
    fail function
    call 3
    fail call
    for 3
    fail for
    if 3
    fail if
    block 3
    fail block
   fail statement
  RCURL } 1
 remove multiple key
 success block
Symbol program Parsed until (9,1) 168 of 168
par mem 13230 of 16800 16800 1 0 20
prog size 168 factor 78
par mem 3182 of 16800 16800 1 0 20
Destruct Lexer
Destruct Parser

Analyzer
 Program ColorRandom 1 0
    Function ColorRandom.renderFrame
        Assign i = {value (not of interest during analyze...)}
        Var (assign) renderFrame.i of notype
         Assign i = {value (not of interest during analyze...)}
           Assign color = {value (not of interest during analyze...)}
           Var (assign) renderFrame.color of notype
    0 Assign renderFrame.i notype 2
    1 Assign renderFrame.color notype 2
 0 Function ColorRandom.renderFrame  1

interpret ColorRandom 1 1
 program name ID
 Program ColorRandom ColorRandom
    Save block of renderFrame
         Call renderFrame (1)
            For (0)
            from
                INTEGER_CONST 0 (Push 1)
             renderFrame.i := 0 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 0 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             0 < 3 = 1 (push 1)
            (pop 0)
            1 => run block
                  Call random()
               renderFrame.color := 41 (pop 0)
                  VarRef renderFrame.i = 0 (push 1)
                    VarRef renderFrame.color = 41 (push 2)
               Call setPixelColor(0, 41)
setPixelColor(0, 41)
            assign next value
                VarRef renderFrame.i = 0 (push 1)
                 PLUS + (Push 2)
                  INTEGER_CONST 1 (Push 3)
              0 + 1 = 1 (push 1)
             renderFrame.i := 1 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 1 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             1 < 3 = 1 (push 1)
            (pop 0)
            1 => run block
                  Call random()
               renderFrame.color := 18467 (pop 0)
                  VarRef renderFrame.i = 1 (push 1)
                    VarRef renderFrame.color = 18467 (push 2)
               Call setPixelColor(1, 18467)
setPixelColor(1, 18467)
            assign next value
                VarRef renderFrame.i = 1 (push 1)
                 PLUS + (Push 2)
                  INTEGER_CONST 1 (Push 3)
              1 + 1 = 2 (push 1)
             renderFrame.i := 2 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 2 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             2 < 3 = 1 (push 1)
            (pop 0)
            1 => run block
                  Call random()
               renderFrame.color := 6334 (pop 0)
                  VarRef renderFrame.i = 2 (push 1)
                    VarRef renderFrame.color = 6334 (push 2)
               Call setPixelColor(2, 6334)
setPixelColor(2, 6334)
            assign next value
                VarRef renderFrame.i = 2 (push 1)
                 PLUS + (Push 2)
                  INTEGER_CONST 1 (Push 3)
              2 + 1 = 3 (push 1)
             renderFrame.i := 3 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 3 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             3 < 3 = 0 (push 1)
            (pop 0)
            0 => end of For
Destruct activation record renderFrame
         Call renderFrame (1)
            For (0)
            from
                INTEGER_CONST 0 (Push 1)
             renderFrame.i := 0 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 0 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             0 < 3 = 1 (push 1)
            (pop 0)
            1 => run block
                  Call random()
               renderFrame.color := 26500 (pop 0)
                  VarRef renderFrame.i = 0 (push 1)
                    VarRef renderFrame.color = 26500 (push 2)
               Call setPixelColor(0, 26500)
setPixelColor(0, 26500)
            assign next value
                VarRef renderFrame.i = 0 (push 1)
                 PLUS + (Push 2)
                  INTEGER_CONST 1 (Push 3)
              0 + 1 = 1 (push 1)
             renderFrame.i := 1 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 1 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             1 < 3 = 1 (push 1)
            (pop 0)
            1 => run block
                  Call random()
               renderFrame.color := 19169 (pop 0)
                  VarRef renderFrame.i = 1 (push 1)
                    VarRef renderFrame.color = 19169 (push 2)
               Call setPixelColor(1, 19169)
setPixelColor(1, 19169)
            assign next value
                VarRef renderFrame.i = 1 (push 1)
                 PLUS + (Push 2)
                  INTEGER_CONST 1 (Push 3)
              1 + 1 = 2 (push 1)
             renderFrame.i := 2 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 2 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             2 < 3 = 1 (push 1)
            (pop 0)
            1 => run block
                  Call random()
               renderFrame.color := 15724 (pop 0)
                  VarRef renderFrame.i = 2 (push 1)
                    VarRef renderFrame.color = 15724 (push 2)
               Call setPixelColor(2, 15724)
setPixelColor(2, 15724)
            assign next value
                VarRef renderFrame.i = 2 (push 1)
                 PLUS + (Push 2)
                  INTEGER_CONST 1 (Push 3)
              2 + 1 = 3 (push 1)
             renderFrame.i := 3 (pop 0)
            iteration
            check to condition
               VarRef renderFrame.i = 3 (push 1)
                LT < (Push 2)
                 VarRef ext.ledCount = 3 (push 3)
             3 < 3 = 0 (push 1)
            (pop 0)
            0 => end of For
Destruct activation record renderFrame
Destruct callstack
Destruct valueStack
Destruct Interpreter
def mem 7737 of 12192 12192 24 0 6
